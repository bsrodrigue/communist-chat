(()=>{var e={408:(e,t)=>{function n(e,t){t.headers=e.headers||{},t.statusMessage=e.statusText,t.statusCode=e.status,t.data=e.response}t.send=function(e,t,r){return new Promise((function(i,o){var s,a,c,u;r=r||{};var l=new XMLHttpRequest,f=r.headers||{};for(s in r.timeout&&(l.timeout=r.timeout),l.ontimeout=l.onerror=function(e){e.timeout="timeout"==e.type,o(e)},l.open(e,t.href||t),l.onload=function(){for(u=l.getAllResponseHeaders().trim().split(/[\r\n]+/),n(l,l);c=u.shift();)c=c.split(": "),l.headers[c.shift().toLowerCase()]=c.join(": ");if((c=l.headers["content-type"])&&~c.indexOf("application/json"))try{l.data=JSON.parse(l.data,r.reviver)}catch(e){return n(l,e),o(e)}(l.status>=400?o:i)(l)},(a=r.body)&&"object"==typeof a&&(f["content-type"]="application/json",a=JSON.stringify(a)),l.withCredentials=!!r.withCredentials,f)l.setRequestHeader(s,f[s]);l.send(a)}))},t.get=t.send.bind(t.send,"GET"),t.post=t.send.bind(t.send,"POST"),t.patch=t.send.bind(t.send,"PATCH"),t.del=t.send.bind(t.send,"DELETE"),t.put=t.send.bind(t.send,"PUT")},785:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.Reflection=t.ReflectionType=t.ReflectionField=void 0;var s=n(598),a=n(898),c=n(31),u=n(421),l=new s.Context,f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),o([s.type("string",l)],t.prototype,"name",void 0),o([s.type("string",l)],t.prototype,"type",void 0),o([s.type("number",l)],t.prototype,"referencedType",void 0),t}(a.Schema);t.ReflectionField=f;var h=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.fields=new c.ArraySchema,t}return i(t,e),o([s.type("number",l)],t.prototype,"id",void 0),o([s.type([f],l)],t.prototype,"fields",void 0),t}(a.Schema);t.ReflectionType=h;var d=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.types=new c.ArraySchema,t}return i(t,e),t.encode=function(e){var n=e.constructor,r=new t;r.rootType=n._typeid;var i=function(e,t){for(var n in t){var i=new f;i.name=n;var o=void 0;if("string"==typeof t[n])o=t[n];else{var s=t[n],c=void 0;a.Schema.is(s)?(o="ref",c=t[n]):"string"==typeof s[o=Object.keys(s)[0]]?o+=":"+s[o]:c=s[o],i.referencedType=c?c._typeid:-1}i.type=o,e.fields.push(i)}r.types.push(e)},o=n._context.types;for(var s in o){var c=new h;c.id=Number(s),i(c,o[s]._definition.schema)}return r.encodeAll()},t.decode=function(e,n){var r=new s.Context,o=new t;o.decode(e,n);var c=o.types.reduce((function(e,t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(a.Schema),o=t.id;return e[o]=n,r.add(n,o),e}),{});o.types.forEach((function(e){var t=c[e.id];e.fields.forEach((function(e){var n;if(void 0!==e.referencedType){var i=e.type,o=c[e.referencedType];if(!o){var a=e.type.split(":");i=a[0],o=a[1]}"ref"===i?s.type(o,r)(t.prototype,e.name):s.type(((n={})[i]=o,n),r)(t.prototype,e.name)}else s.type(e.type,r)(t.prototype,e.name)}))}));var l=c[o.rootType],f=new l;for(var h in l._definition.schema){var d=l._definition.schema[h];"string"!=typeof d&&(f[h]="function"==typeof d?new d:new(u.getType(Object.keys(d)[0]).constructor))}return f},o([s.type([h],l)],t.prototype,"types",void 0),o([s.type("number",l)],t.prototype,"rootType",void 0),t}(a.Schema);t.Reflection=d},898:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.Schema=void 0;var s=n(787),a=n(598),c=n(163),u=n(357),l=n(31),f=n(582),h=n(611),d=n(317),p=n(377),y=n(624),g=n(376),v=n(421),m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(Error);function b(e,t,n,r){if(!(e instanceof t))throw new m("a '"+t.name+"' was expected, but '"+e.constructor.name+"' was provided in "+n.constructor.name+"#"+r)}function w(e,t,n,r,i){!function(e,t,n,r){var i,o=!1;switch(t){case"number":case"int8":case"uint8":case"int16":case"uint16":case"int32":case"uint32":case"int64":case"uint64":case"float32":case"float64":i="number",isNaN(e)&&console.log('trying to encode "NaN" in '+n.constructor.name+"#"+r);break;case"string":i="string",o=!0;break;case"boolean":return}if(typeof e!==i&&(!o||o&&null!==e)){var s="'"+JSON.stringify(e)+"'"+(e&&e.constructor&&" ("+e.constructor.name+")"||"");throw new m("a '"+i+"' was expected, but "+s+" was provided in "+n.constructor.name+"#"+r)}}(n,e,r,i);var o=c[e];if(!o)throw new m("a '"+e+"' was expected, but "+n+" was provided in "+r.constructor.name+"#"+i);o(t,n)}function _(e,t,n){return u[e](t,n)}var $=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];Object.defineProperties(this,{$changes:{value:new p.ChangeTree(this,void 0,new p.Root),enumerable:!1,writable:!0},$listeners:{value:{},enumerable:!1,writable:!0}});var n=this._definition.descriptors;n&&Object.defineProperties(this,n),e[0]&&this.assign(e[0])}return e.onError=function(e){console.error(e)},e.is=function(e){return e._definition&&void 0!==e._definition.schema},e.prototype.assign=function(e){return Object.assign(this,e),this},Object.defineProperty(e.prototype,"_definition",{get:function(){return this.constructor._definition},enumerable:!1,configurable:!0}),e.prototype.listen=function(e,t){var n=this;return this.$listeners[e]||(this.$listeners[e]=new y.EventEmitter),this.$listeners[e].register(t),function(){return n.$listeners[e].remove(t)}},e.prototype.decode=function(t,n,r,i){void 0===n&&(n={offset:0}),void 0===r&&(r=this),void 0===i&&(i=new Map);var a=this.$changes.root,c=t.length,p=0,y=[];for(a.refs.set(p,this),i.set(p,y);n.offset<c;){var g=t[n.offset++];if(g!=s.SWITCH_TO_STRUCTURE){var m=r.$changes,b=void 0!==r._definition,w=b?g>>6<<6:g;if(w!==s.OPERATION.CLEAR){var $=b?g%(w||255):u.number(t,n),E=b?r._definition.fieldsByIndex[$]:"",O=m.getType($),A=void 0,k=void 0,x=void 0;if(b?k=r["_"+E]:(k=r.getByIndex($),(w&s.OPERATION.ADD)===s.OPERATION.ADD?(x=r instanceof f.MapSchema?u.string(t,n):$,r.setIndex($,x)):x=r.getIndex($)),(w&s.OPERATION.DELETE)===s.OPERATION.DELETE&&(w!==s.OPERATION.DELETE_AND_ADD&&r.deleteByIndex($),k&&k.$changes&&a.removeRef(k.$changes.refId),A=null),void 0!==E){if(w===s.OPERATION.DELETE);else if(e.is(O)){var S=u.number(t,n);if(A=a.refs.get(S),w!==s.OPERATION.REPLACE){var C=this.getSchemaType(t,n,O);A||((A=this.createTypeInstance(C)).$changes.refId=S,k&&(A.onChange=k.onChange,A.onRemove=k.onRemove,A.$listeners=k.$listeners,k.$changes.refId&&S!==k.$changes.refId&&a.removeRef(k.$changes.refId))),a.addRef(S,A,A!==k)}}else if("string"==typeof O)A=_(O,t,n);else{var I=v.getType(Object.keys(O)[0]),j=u.number(t,n),P=a.refs.has(j)?k:new I.constructor;if((A=P.clone(!0)).$changes.refId=j,k&&(A.onAdd=k.onAdd,A.onRemove=k.onRemove,A.onChange=k.onChange,k.$changes.refId&&j!==k.$changes.refId)){a.removeRef(k.$changes.refId);for(var T=[],R=k.entries(),M=void 0;(M=R.next())&&!M.done;){var N=o(M.value,2),D=N[0],L=N[1];T.push({op:s.OPERATION.DELETE,field:D,value:void 0,previousValue:L})}i.set(k.$changes.refId,T)}a.addRef(j,A,P!==k),I.getProxy&&(A=I.getProxy(A))}var z=k!==A;if(null!=A)if(A.$changes&&A.$changes.setParent(m.ref,m.root,$),r instanceof e)r[E]=A;else if(r instanceof f.MapSchema)D=x,r.$items.set(D,A);else if(r instanceof l.ArraySchema)r.setAt($,A);else if(r instanceof h.CollectionSchema||r instanceof d.SetSchema){var U=r.add(A);r.setIndex($,U)}z&&y.push({op:w,field:E,dynamicIndex:x,value:A,previousValue:k})}else{console.warn("@colyseus/schema: definition mismatch");for(var B={offset:n.offset};n.offset<c&&(!u.switchStructureCheck(t,n)||(B.offset=n.offset+1,!a.refs.has(u.number(t,B))));)n.offset++}}else r.clear(!0)}else{p=u.number(t,n);var F=a.refs.get(p);if(!F)throw new Error('"refId" not found: '+p);r=F,y=[],i.set(p,y)}}return this._triggerChanges(i),a.garbageCollectDeletedRefs(),i},e.prototype.encode=function(t,n,r){void 0===t&&(t=!1),void 0===n&&(n=[]),void 0===r&&(r=!1);for(var i=this.$changes,o=new WeakSet,a=[i],u=1,l=0;l<u;l++){var h=a[l],d=h.ref,p=d instanceof e;h.ensureRefId(),o.add(h),h!==i&&(h.changed||t)&&(c.uint8(n,s.SWITCH_TO_STRUCTURE),c.number(n,h.refId));for(var y=t?Array.from(h.allChanges):Array.from(h.changes.values()),g=0,m=y.length;g<m;g++){var _=t?{op:s.OPERATION.ADD,index:y[g]}:y[g],$=_.index,E=p?d._definition.fieldsByIndex&&d._definition.fieldsByIndex[$]:$,O=n.length;if(_.op!==s.OPERATION.TOUCH)if(p)c.uint8(n,$|_.op);else{if(c.uint8(n,_.op),_.op===s.OPERATION.CLEAR)continue;c.number(n,$)}if(!p&&(_.op&s.OPERATION.ADD)==s.OPERATION.ADD&&d instanceof f.MapSchema){var A=h.ref.$indexes.get($);c.string(n,A)}if(_.op!==s.OPERATION.DELETE){var k=h.getType($),x=h.getValue($);if(x&&x.$changes&&!o.has(x.$changes)&&(a.push(x.$changes),x.$changes.ensureRefId(),u++),_.op!==s.OPERATION.TOUCH){if(e.is(k))b(x,k,d,E),c.number(n,x.$changes.refId),(_.op&s.OPERATION.ADD)===s.OPERATION.ADD&&this.tryEncodeTypeId(n,k,x.constructor);else if("string"==typeof k)w(k,n,x,d,E);else{var S=v.getType(Object.keys(k)[0]);b(d["_"+E],S.constructor,d,E),c.number(n,x.$changes.refId)}r&&h.cache($,n.slice(O))}}}t||r||h.discard()}return n},e.prototype.encodeAll=function(e){return this.encode(!0,[],e)},e.prototype.applyFilters=function(t,n){void 0===n&&(n=!1);for(var r=this,i=new Set,o=g.ClientState.get(t),a=[this.$changes],u=1,l=[],h=function(h){var d=a[h];if(i.has(d.refId))return"continue";var p=d.ref,y=p instanceof e;c.uint8(l,s.SWITCH_TO_STRUCTURE),c.number(l,d.refId);var g=o.refIds.has(d),v=n||!g;o.addRefId(d);var m=o.containerIndexes.get(d),b=v?Array.from(d.allChanges):Array.from(d.changes.values());!n&&y&&p._definition.indexesWithFilters&&p._definition.indexesWithFilters.forEach((function(e){!m.has(e)&&d.allChanges.has(e)&&(v?b.push(e):b.push({op:s.OPERATION.ADD,index:e}))}));for(var w=0,_=b.length;w<_;w++){var $=v?{op:s.OPERATION.ADD,index:b[w]}:b[w];if($.op!==s.OPERATION.CLEAR){var E=$.index;if($.op!==s.OPERATION.DELETE){var O=d.getValue(E),A=d.getType(E);if(y){if((k=p._definition.filters&&p._definition.filters[E])&&!k.call(p,t,O,r)){O&&O.$changes&&i.add(O.$changes.refId);continue}}else{var k,x=d.parent;if((k=d.getChildrenFilter())&&!k.call(x,t,p.$indexes.get(E),O,r)){O&&O.$changes&&i.add(O.$changes.refId);continue}}if(O.$changes&&(a.push(O.$changes),u++),$.op!==s.OPERATION.TOUCH)if($.op===s.OPERATION.ADD||y)l=l.concat(d.caches[E]),m.add(E);else if(m.has(E))l=l.concat(d.caches[E]);else{if(m.add(E),c.uint8(l,s.OPERATION.ADD),c.number(l,E),p instanceof f.MapSchema){var S=d.ref.$indexes.get(E);c.string(l,S)}O.$changes?c.number(l,O.$changes.refId):c[A](l,O)}else O.$changes&&!y&&(c.uint8(l,s.OPERATION.ADD),c.number(l,E),p instanceof f.MapSchema&&(S=d.ref.$indexes.get(E),c.string(l,S)),c.number(l,O.$changes.refId))}else y?c.uint8(l,$.op|E):(c.uint8(l,$.op),c.number(l,E))}else c.uint8(l,$.op)}},d=0;d<u;d++)h(d);return l},e.prototype.clone=function(){var e=new this.constructor,t=this._definition.schema;for(var n in t)"object"==typeof this[n]&&"function"==typeof this[n].clone?e[n]=this[n].clone():e[n]=this[n];return e},e.prototype.triggerAll=function(){if(0!==this.$changes.root.refs.size){var t=new Map;e.prototype._triggerAllFillChanges.call(this,this,t);try{e.prototype._triggerChanges.call(this,t)}catch(t){e.onError(t)}}},e.prototype.toJSON=function(){var e=this._definition.schema,t=this._definition.deprecated,n={};for(var r in e)t[r]||null===this[r]||void 0===this[r]||(n[r]="function"==typeof this[r].toJSON?this[r].toJSON():this["_"+r]);return n},e.prototype.discardAllChanges=function(){this.$changes.discardAll()},e.prototype.getByIndex=function(e){return this[this._definition.fieldsByIndex[e]]},e.prototype.deleteByIndex=function(e){this[this._definition.fieldsByIndex[e]]=void 0},e.prototype.tryEncodeTypeId=function(e,t,n){t._typeid!==n._typeid&&(c.uint8(e,s.TYPE_ID),c.number(e,n._typeid))},e.prototype.getSchemaType=function(e,t,n){var r;return e[t.offset]===s.TYPE_ID&&(t.offset++,r=this.constructor._context.get(u.number(e,t))),r||n},e.prototype.createTypeInstance=function(e){var t=new e;return t.$changes.root=this.$changes.root,t},e.prototype._triggerAllFillChanges=function(t,n){if(!n.has(t.$changes.refId)){var r=[];if(n.set(t.$changes.refId||0,r),t instanceof e){var i=t._definition.schema;for(var a in i)void 0!==(h=t["_"+a])&&(r.push({op:s.OPERATION.ADD,field:a,value:h,previousValue:void 0}),void 0!==h.$changes&&e.prototype._triggerAllFillChanges.call(this,h,n))}else for(var c=t.entries(),u=void 0;(u=c.next())&&!u.done;){var l=o(u.value,2),f=l[0],h=l[1];r.push({op:s.OPERATION.ADD,field:f,dynamicIndex:f,value:h,previousValue:void 0}),void 0!==h.$changes&&e.prototype._triggerAllFillChanges.call(this,h,n)}}},e.prototype._triggerChanges=function(t){var n=this;t.forEach((function(t,r){var i,o,a,c,u,l,f,h,d,p,y,g;if(t.length>0){for(var v=n.$changes.root.refs.get(r),m=v instanceof e,b=0;b<t.length;b++){var w=t[b],_=v.$listeners&&v.$listeners[w.field];if(m||(w.op===s.OPERATION.ADD&&void 0===w.previousValue?null===(o=(i=v).onAdd)||void 0===o||o.call(i,w.value,null!==(a=w.dynamicIndex)&&void 0!==a?a:w.field):w.op===s.OPERATION.DELETE?void 0!==w.previousValue&&(null===(u=(c=v).onRemove)||void 0===u||u.call(c,w.previousValue,null!==(l=w.dynamicIndex)&&void 0!==l?l:w.field)):w.op===s.OPERATION.DELETE_AND_ADD?(void 0!==w.previousValue&&(null===(h=(f=v).onRemove)||void 0===h||h.call(f,w.previousValue,w.dynamicIndex)),null===(p=(d=v).onAdd)||void 0===p||p.call(d,w.value,w.dynamicIndex)):w.op!==s.OPERATION.REPLACE&&w.value===w.previousValue||null===(g=(y=v).onChange)||void 0===g||g.call(y,w.value,w.dynamicIndex)),(w.op&s.OPERATION.DELETE)===s.OPERATION.DELETE&&w.previousValue instanceof e&&w.previousValue.onRemove&&w.previousValue.onRemove(),_)try{_.invoke(w.value,w.previousValue)}catch(t){e.onError(t)}}if(m&&v.onChange)try{v.onChange(t)}catch(t){e.onError(t)}}}))},e._definition=a.SchemaDefinition.create(),e}();t.Schema=$},598:function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0}),t.defineTypes=t.deprecated=t.filterChildren=t.filter=t.type=t.globalContext=t.Context=t.hasFilter=t.SchemaDefinition=void 0;var o=n(898),s=n(31),a=n(582),c=n(421),u=function(){function e(){this.indexes={},this.fieldsByIndex={},this.deprecated={},this.descriptors={}}return e.create=function(t){var n=new e;return n.schema=Object.assign({},t&&t.schema||{}),n.indexes=Object.assign({},t&&t.indexes||{}),n.fieldsByIndex=Object.assign({},t&&t.fieldsByIndex||{}),n.descriptors=Object.assign({},t&&t.descriptors||{}),n.deprecated=Object.assign({},t&&t.deprecated||{}),n},e.prototype.addField=function(e,t){var n=this.getNextFieldIndex();this.fieldsByIndex[n]=e,this.indexes[e]=n,this.schema[e]=Array.isArray(t)?{array:t[0]}:t},e.prototype.addFilter=function(e,t){return this.filters||(this.filters={},this.indexesWithFilters=[]),this.filters[this.indexes[e]]=t,this.indexesWithFilters.push(this.indexes[e]),!0},e.prototype.addChildrenFilter=function(e,t){var n=this.indexes[e],r=this.schema[e];if(c.getType(Object.keys(r)[0]))return this.childFilters||(this.childFilters={}),this.childFilters[n]=t,!0;console.warn("@filterChildren: field '"+e+"' can't have children. Ignoring filter.")},e.prototype.getChildrenFilter=function(e){return this.childFilters&&this.childFilters[this.indexes[e]]},e.prototype.getNextFieldIndex=function(){return Object.keys(this.schema||{}).length},e}();t.SchemaDefinition=u,t.hasFilter=function(e){return e._context&&e._context.useFilters};var l=function(){function e(){this.types={},this.schemas=new Map,this.useFilters=!1}return e.prototype.has=function(e){return this.schemas.has(e)},e.prototype.get=function(e){return this.types[e]},e.prototype.add=function(e,t){void 0===t&&(t=this.schemas.size),e._definition=u.create(e._definition),e._typeid=t,this.types[t]=e,this.schemas.set(e,t)},e.create=function(t){return void 0===t&&(t=new e),function(e){return f(e,t)}},e}();function f(e,n){return void 0===n&&(n=t.globalContext),function(t,r){var c=t.constructor;c._context=n,n.has(c)||n.add(c);var u=c._definition;if(u.addField(r,e),!u.descriptors[r]){var l=s.ArraySchema.is(e),f=!l&&a.MapSchema.is(e);if("string"!=typeof e&&!o.Schema.is(e)){var h=Object.values(e)[0];"string"==typeof h||n.has(h)||n.add(h)}var d="_"+r;u.descriptors[d]={enumerable:!1,configurable:!1,writable:!0},u.descriptors[r]={get:function(){return this[d]},set:function(e){e!==this[d]&&(null!=e?(!l||e instanceof s.ArraySchema||(e=new(s.ArraySchema.bind.apply(s.ArraySchema,i([void 0],e)))),!f||e instanceof a.MapSchema||(e=new a.MapSchema(e)),void 0===e.$proxy&&(f?e=a.getMapProxy(e):l&&(e=s.getArrayProxy(e))),this.$changes.change(r),e.$changes&&e.$changes.setParent(this,this.$changes.root,this._definition.indexes[r])):this.$changes.delete(r),this[d]=e)},enumerable:!0,configurable:!0}}}}t.Context=l,t.globalContext=new l,t.type=f,t.filter=function(e){return function(t,n){var r=t.constructor;r._definition.addFilter(n,e)&&(r._context.useFilters=!0)}},t.filterChildren=function(e){return function(t,n){var r=t.constructor;r._definition.addChildrenFilter(n,e)&&(r._context.useFilters=!0)}},t.deprecated=function(e,n){return void 0===e&&(e=!0),void 0===n&&(n=t.globalContext),function(t,n){var r=t.constructor._definition;r.deprecated[n]=!0,e&&(r.descriptors[n]={get:function(){throw new Error(n+" is deprecated.")},set:function(e){},enumerable:!1,configurable:!0})}},t.defineTypes=function(e,n,r){for(var i in void 0===r&&(r=e._context||t.globalContext),n)f(n[i],r)(e.prototype,i);return e}},377:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChangeTree=t.Root=void 0;var r=n(787),i=n(898),o=function(){function e(){this.refs=new Map,this.refCounts={},this.deletedRefs=new Set,this.nextUniqueId=0}return e.prototype.getNextUniqueId=function(){return this.nextUniqueId++},e.prototype.addRef=function(e,t,n){void 0===n&&(n=!0),this.refs.set(e,t),n&&(this.refCounts[e]=(this.refCounts[e]||0)+1)},e.prototype.removeRef=function(e){this.refCounts[e]=this.refCounts[e]-1,this.deletedRefs.add(e)},e.prototype.clearRefs=function(){this.refs.clear(),this.deletedRefs.clear(),this.refCounts={}},e.prototype.garbageCollectDeletedRefs=function(){var e=this;this.deletedRefs.forEach((function(t){if(e.refCounts[t]<=0){var n=e.refs.get(t);if(n instanceof i.Schema)for(var r in n._definition.schema)"string"!=typeof n._definition.schema[r]&&n[r]&&n[r].$changes&&e.removeRef(n[r].$changes.refId);else{var o=n.$changes.parent._definition,s=o.schema[o.fieldsByIndex[n.$changes.parentIndex]];"function"==typeof Object.values(s)[0]&&Array.from(n.values()).forEach((function(t){return e.removeRef(t.$changes.refId)}))}e.refs.delete(t),delete e.refCounts[t]}})),this.deletedRefs.clear()},e}();t.Root=o;var s=function(){function e(e,t,n){this.changed=!1,this.changes=new Map,this.allChanges=new Set,this.caches={},this.currentCustomOperation=0,this.ref=e,this.setParent(t,n)}return e.prototype.setParent=function(e,t,n){var r=this;if(this.indexes||(this.indexes=this.ref instanceof i.Schema?this.ref._definition.indexes:{}),this.parent=e,this.parentIndex=n,t)if(this.root=t,this.ref instanceof i.Schema){var o=this.ref._definition;for(var s in o.schema){var a=this.ref[s];if(a&&a.$changes){var c=o.indexes[s];a.$changes.setParent(this.ref,t,c)}}}else"object"==typeof this.ref&&this.ref.forEach((function(e,t){if(e instanceof i.Schema){var n=e.$changes,o=r.ref.$changes.indexes[t];n.setParent(r.ref,r.root,o)}}))},e.prototype.operation=function(e){this.changes.set(--this.currentCustomOperation,e)},e.prototype.change=function(e,t){void 0===t&&(t=r.OPERATION.ADD);var n="number"==typeof e?e:this.indexes[e];this.assertValidIndex(n,e);var i=this.changes.get(n);i&&i.op!==r.OPERATION.DELETE&&i.op!==r.OPERATION.TOUCH||this.changes.set(n,{op:i&&i.op===r.OPERATION.DELETE?r.OPERATION.DELETE_AND_ADD:t,index:n}),this.allChanges.add(n),this.changed=!0,this.touchParents()},e.prototype.touch=function(e){var t="number"==typeof e?e:this.indexes[e];this.assertValidIndex(t,e),this.changes.has(t)||this.changes.set(t,{op:r.OPERATION.TOUCH,index:t}),this.allChanges.add(t),this.touchParents()},e.prototype.touchParents=function(){this.parent&&this.parent.$changes.touch(this.parentIndex)},e.prototype.getType=function(e){if(this.ref._definition)return(t=this.ref._definition).schema[t.fieldsByIndex[e]];var t,n=(t=this.parent._definition).schema[t.fieldsByIndex[this.parentIndex]];return Object.values(n)[0]},e.prototype.getChildrenFilter=function(){var e=this.parent._definition.childFilters;return e&&e[this.parentIndex]},e.prototype.getValue=function(e){return this.ref.getByIndex(e)},e.prototype.delete=function(e){var t="number"==typeof e?e:this.indexes[e];if(void 0!==t){var n=this.getValue(t);this.changes.set(t,{op:r.OPERATION.DELETE,index:t}),this.allChanges.delete(t),delete this.caches[t],n&&n.$changes&&(n.$changes.parent=void 0),this.changed=!0,this.touchParents()}else console.warn("@colyseus/schema "+this.ref.constructor.name+": trying to delete non-existing index: "+e+" ("+t+")")},e.prototype.discard=function(e,t){var n=this;void 0===e&&(e=!1),void 0===t&&(t=!1),this.ref instanceof i.Schema||this.changes.forEach((function(e){if(e.op===r.OPERATION.DELETE){var t=n.ref.getIndex(e.index);delete n.indexes[t]}})),this.changes.clear(),this.changed=e,t&&this.allChanges.clear(),this.currentCustomOperation=0},e.prototype.discardAll=function(){var e=this;this.changes.forEach((function(t){var n=e.getValue(t.index);n&&n.$changes&&n.$changes.discardAll()})),this.discard()},e.prototype.cache=function(e,t){this.caches[e]=t},e.prototype.clone=function(){return new e(this.ref,this.parent,this.root)},e.prototype.ensureRefId=function(){void 0===this.refId&&(this.refId=this.root.getNextUniqueId())},e.prototype.assertValidIndex=function(e,t){if(void 0===e)throw new Error('ChangeTree: missing index for field "'+t+'"')},e}();t.ChangeTree=s},357:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.switchStructureCheck=t.arrayCheck=t.numberCheck=t.number=t.stringCheck=t.string=t.boolean=t.readFloat64=t.readFloat32=t.uint64=t.int64=t.float64=t.float32=t.uint32=t.int32=t.uint16=t.int16=t.uint8=t.int8=void 0;var r=n(787);function i(e,t){return o(e,t)<<24>>24}function o(e,t){return e[t.offset++]}function s(e,t){return a(e,t)<<16>>16}function a(e,t){return e[t.offset++]|e[t.offset++]<<8}function c(e,t){return e[t.offset++]|e[t.offset++]<<8|e[t.offset++]<<16|e[t.offset++]<<24}function u(e,t){return c(e,t)>>>0}function l(e,t){var n=u(e,t);return c(e,t)*Math.pow(2,32)+n}function f(e,t){var n=u(e,t);return u(e,t)*Math.pow(2,32)+n}t.int8=i,t.uint8=o,t.int16=s,t.uint16=a,t.int32=c,t.uint32=u,t.float32=function(e,t){return y(e,t)},t.float64=function(e,t){return g(e,t)},t.int64=l,t.uint64=f;var h=new Int32Array(2),d=new Float32Array(h.buffer),p=new Float64Array(h.buffer);function y(e,t){return h[0]=c(e,t),d[0]}function g(e,t){return h[0]=c(e,t),h[1]=c(e,t),p[0]}t.readFloat32=y,t.readFloat64=g,t.boolean=function(e,t){return o(e,t)>0},t.string=function(e,t){var n,r=e[t.offset++];r<192?n=31&r:217===r?n=o(e,t):218===r?n=a(e,t):219===r&&(n=u(e,t));var i=function(e,t,n){for(var r="",i=0,o=t,s=t+n;o<s;o++){var a=e[o];0!=(128&a)?192!=(224&a)?224!=(240&a)?240!=(248&a)?console.error("Invalid byte "+a.toString(16)):(i=(7&a)<<18|(63&e[++o])<<12|(63&e[++o])<<6|(63&e[++o])<<0)>=65536?(i-=65536,r+=String.fromCharCode(55296+(i>>>10),56320+(1023&i))):r+=String.fromCharCode(i):r+=String.fromCharCode((15&a)<<12|(63&e[++o])<<6|(63&e[++o])<<0):r+=String.fromCharCode((31&a)<<6|63&e[++o]):r+=String.fromCharCode(a)}return r}(e,t.offset,n);return t.offset+=n,i},t.stringCheck=function(e,t){var n=e[t.offset];return n<192&&n>160||217===n||218===n||219===n},t.number=function(e,t){var n=e[t.offset++];return n<128?n:202===n?y(e,t):203===n?g(e,t):204===n?o(e,t):205===n?a(e,t):206===n?u(e,t):207===n?f(e,t):208===n?i(e,t):209===n?s(e,t):210===n?c(e,t):211===n?l(e,t):n>223?-1*(255-n+1):void 0},t.numberCheck=function(e,t){var n=e[t.offset];return n<128||n>=202&&n<=211},t.arrayCheck=function(e,t){return e[t.offset]<160},t.switchStructureCheck=function(e,t){return e[t.offset-1]===r.SWITCH_TO_STRUCTURE&&(e[t.offset]<128||e[t.offset]>=202&&e[t.offset]<=211)}},163:(e,t)=>{"use strict";function n(e,t,n){for(var r=0,i=0,o=n.length;i<o;i++)(r=n.charCodeAt(i))<128?e[t++]=r:r<2048?(e[t++]=192|r>>6,e[t++]=128|63&r):r<55296||r>=57344?(e[t++]=224|r>>12,e[t++]=128|r>>6&63,e[t++]=128|63&r):(i++,r=65536+((1023&r)<<10|1023&n.charCodeAt(i)),e[t++]=240|r>>18,e[t++]=128|r>>12&63,e[t++]=128|r>>6&63,e[t++]=128|63&r)}function r(e,t){e.push(255&t)}function i(e,t){e.push(255&t)}function o(e,t){e.push(255&t),e.push(t>>8&255)}function s(e,t){e.push(255&t),e.push(t>>8&255)}function a(e,t){e.push(255&t),e.push(t>>8&255),e.push(t>>16&255),e.push(t>>24&255)}function c(e,t){var n=t>>24,r=t>>16,i=t>>8,o=t;e.push(255&o),e.push(255&i),e.push(255&r),e.push(255&n)}function u(e,t){var n=Math.floor(t/Math.pow(2,32));c(e,t>>>0),c(e,n)}function l(e,t){var n=t/Math.pow(2,32)>>0;c(e,t>>>0),c(e,n)}Object.defineProperty(t,"__esModule",{value:!0}),t.number=t.string=t.boolean=t.writeFloat64=t.writeFloat32=t.float64=t.float32=t.uint64=t.int64=t.uint32=t.int32=t.uint16=t.int16=t.uint8=t.int8=t.utf8Write=void 0,t.utf8Write=n,t.int8=r,t.uint8=i,t.int16=o,t.uint16=s,t.int32=a,t.uint32=c,t.int64=u,t.uint64=l,t.float32=function(e,t){p(e,t)},t.float64=function(e,t){y(e,t)};var f=new Int32Array(2),h=new Float32Array(f.buffer),d=new Float64Array(f.buffer);function p(e,t){h[0]=t,a(e,f[0])}function y(e,t){d[0]=t,a(e,f[0]),a(e,f[1])}t.writeFloat32=p,t.writeFloat64=y,t.boolean=function(e,t){return i(e,t?1:0)},t.string=function(e,t){t||(t="");var r=function(e){for(var t=0,n=0,r=0,i=e.length;r<i;r++)(t=e.charCodeAt(r))<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n}(t),o=0;if(r<32)e.push(160|r),o=1;else if(r<256)e.push(217),i(e,r),o=2;else if(r<65536)e.push(218),s(e,r),o=3;else{if(!(r<4294967296))throw new Error("String too long");e.push(219),c(e,r),o=5}return n(e,e.length,t),o+r},t.number=function e(t,n){return isNaN(n)?e(t,0):isFinite(n)?n!==(0|n)?(t.push(203),y(t,n),9):n>=0?n<128?(i(t,n),1):n<256?(t.push(204),i(t,n),2):n<65536?(t.push(205),s(t,n),3):n<4294967296?(t.push(206),c(t,n),5):(t.push(207),l(t,n),9):n>=-32?(t.push(224|n+32),1):n>=-128?(t.push(208),r(t,n),2):n>=-32768?(t.push(209),o(t,n),3):n>=-2147483648?(t.push(210),a(t,n),5):(t.push(211),u(t,n),9):e(t,n>0?Number.MAX_SAFE_INTEGER:-Number.MAX_SAFE_INTEGER)}},624:function(e,t){"use strict";var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},r=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var i=function(){function e(){this.handlers=[]}return e.prototype.register=function(e,t){return void 0===t&&(t=!1),this.handlers.push(e),this},e.prototype.invoke=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.handlers.forEach((function(t){return t.apply(void 0,r(e))}))},e.prototype.invokeAsync=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Promise.all(this.handlers.map((function(t){return t.apply(void 0,r(e))})))},e.prototype.remove=function(e){var t=this.handlers.indexOf(e);this.handlers[t]=this.handlers[this.handlers.length-1],this.handlers.pop()},e.prototype.clear=function(){this.handlers=[]},e}();t.EventEmitter=i},376:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClientState=void 0;var n=function(){function e(){this.refIds=new WeakSet,this.containerIndexes=new WeakMap}return e.prototype.addRefId=function(e){this.refIds.has(e)||(this.refIds.add(e),this.containerIndexes.set(e,new Set))},e.get=function(t){return void 0===t.$filterState&&(t.$filterState=new e),t.$filterState},e}();t.ClientState=n},715:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(898);Object.defineProperty(t,"Schema",{enumerable:!0,get:function(){return r.Schema}});var i=n(582);Object.defineProperty(t,"MapSchema",{enumerable:!0,get:function(){return i.MapSchema}});var o=n(31);Object.defineProperty(t,"ArraySchema",{enumerable:!0,get:function(){return o.ArraySchema}});var s=n(611);Object.defineProperty(t,"CollectionSchema",{enumerable:!0,get:function(){return s.CollectionSchema}});var a=n(317);Object.defineProperty(t,"SetSchema",{enumerable:!0,get:function(){return a.SetSchema}});var c=n(793);Object.defineProperty(t,"dumpChanges",{enumerable:!0,get:function(){return c.dumpChanges}});var u=n(785);Object.defineProperty(t,"Reflection",{enumerable:!0,get:function(){return u.Reflection}}),Object.defineProperty(t,"ReflectionType",{enumerable:!0,get:function(){return u.ReflectionType}}),Object.defineProperty(t,"ReflectionField",{enumerable:!0,get:function(){return u.ReflectionField}});var l=n(598);Object.defineProperty(t,"type",{enumerable:!0,get:function(){return l.type}}),Object.defineProperty(t,"deprecated",{enumerable:!0,get:function(){return l.deprecated}}),Object.defineProperty(t,"filter",{enumerable:!0,get:function(){return l.filter}}),Object.defineProperty(t,"filterChildren",{enumerable:!0,get:function(){return l.filterChildren}}),Object.defineProperty(t,"defineTypes",{enumerable:!0,get:function(){return l.defineTypes}}),Object.defineProperty(t,"hasFilter",{enumerable:!0,get:function(){return l.hasFilter}}),Object.defineProperty(t,"SchemaDefinition",{enumerable:!0,get:function(){return l.SchemaDefinition}}),Object.defineProperty(t,"Context",{enumerable:!0,get:function(){return l.Context}});var f=n(787);Object.defineProperty(t,"OPERATION",{enumerable:!0,get:function(){return f.OPERATION}})},787:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.OPERATION=t.TYPE_ID=t.SWITCH_TO_STRUCTURE=void 0,t.SWITCH_TO_STRUCTURE=255,t.TYPE_ID=213,(n=t.OPERATION||(t.OPERATION={}))[n.ADD=128]="ADD",n[n.REPLACE=0]="REPLACE",n[n.DELETE=64]="DELETE",n[n.DELETE_AND_ADD=192]="DELETE_AND_ADD",n[n.TOUCH=1]="TOUCH",n[n.CLEAR=10]="CLEAR"},31:function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0}),t.ArraySchema=t.getArrayProxy=void 0;var o=n(377),s=n(787),a=n(898),c=n(421),u=function(e,t){var n=e.toString(),r=t.toString();return n<r?-1:n>r?1:0};function l(e){return e.$proxy=!0,new Proxy(e,{get:function(e,t){return"symbol"==typeof t||isNaN(t)?e[t]:e.at(t)},set:function(e,t,n){if("symbol"==typeof t||isNaN(t))e[t]=n;else{var r=Array.from(e.$items.keys()),i=parseInt(r[t]||t);null==n?e.deleteAt(i):e.setAt(i,n)}return!0},deleteProperty:function(e,t){return"number"==typeof t?e.deleteAt(t):delete e[t],!0}})}t.getArrayProxy=l;var f=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.$changes=new o.ChangeTree(this),this.$items=new Map,this.$indexes=new Map,this.$refId=0,this.push.apply(this,i(e))}return e.is=function(e){return Array.isArray(e)},Object.defineProperty(e.prototype,"length",{get:function(){return this.$items.size},set:function(e){0===e?this.clear():this.splice(e,this.length-e)},enumerable:!1,configurable:!0}),e.prototype.push=function(){for(var e,t=this,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return n.forEach((function(n){e=t.$refId++,t.setAt(e,n)})),e},e.prototype.pop=function(){var e=Array.from(this.$indexes.values()).pop();if(void 0!==e){this.$changes.delete(e),this.$indexes.delete(e);var t=this.$items.get(e);return this.$items.delete(e),t}},e.prototype.at=function(e){var t=Array.from(this.$items.keys())[e];return this.$items.get(t)},e.prototype.setAt=function(e,t){var n,r;void 0!==t.$changes&&t.$changes.setParent(this,this.$changes.root,e);var i=null!==(r=null===(n=this.$changes.indexes[e])||void 0===n?void 0:n.op)&&void 0!==r?r:s.OPERATION.ADD;this.$changes.indexes[e]=e,this.$indexes.set(e,e),this.$items.set(e,t),this.$changes.change(e,i)},e.prototype.deleteAt=function(e){var t=Array.from(this.$items.keys())[e];return void 0!==t&&this.$deleteAt(t)},e.prototype.$deleteAt=function(e){return this.$changes.delete(e),this.$indexes.delete(e),this.$items.delete(e)},e.prototype.clear=function(e){var t=this;this.$changes.discard(!0,!0),this.$changes.indexes={},this.$indexes.clear(),e&&"string"!=typeof this.$changes.getType()&&this.$items.forEach((function(e){t.$changes.root.removeRef(e.$changes.refId)})),this.$items.clear(),this.$changes.operation({index:0,op:s.OPERATION.CLEAR}),this.$changes.touchParents()},e.prototype.concat=function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return new(e.bind.apply(e,i([void 0],(t=Array.from(this.$items.values())).concat.apply(t,i(n)))))},e.prototype.join=function(e){return Array.from(this.$items.values()).join(e)},e.prototype.reverse=function(){var e=this,t=Array.from(this.$items.keys());return Array.from(this.$items.values()).reverse().forEach((function(n,r){e.setAt(t[r],n)})),this},e.prototype.shift=function(){var e=Array.from(this.$items.keys()).shift();if(void 0!==e){var t=this.$items.get(e);return this.$deleteAt(e),t}},e.prototype.slice=function(t,n){return new(e.bind.apply(e,i([void 0],Array.from(this.$items.values()).slice(t,n))))},e.prototype.sort=function(e){var t=this;void 0===e&&(e=u);var n=Array.from(this.$items.keys());return Array.from(this.$items.values()).sort(e).forEach((function(e,r){t.setAt(n[r],e)})),this},e.prototype.splice=function(e,t){void 0===t&&(t=this.length-e);for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];for(var i=Array.from(this.$items.keys()),o=[],s=e;s<e+t;s++)o.push(this.$items.get(i[s])),this.$deleteAt(i[s]);return o},e.prototype.unshift=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this.length,i=t.length,o=Array.from(this.$items.values());return t.forEach((function(t,n){e.setAt(n,t)})),o.forEach((function(t,n){e.setAt(i+n,t)})),r+i},e.prototype.indexOf=function(e,t){return Array.from(this.$items.values()).indexOf(e,t)},e.prototype.lastIndexOf=function(e,t){return void 0===t&&(t=this.length-1),Array.from(this.$items.values()).lastIndexOf(e,t)},e.prototype.every=function(e,t){return Array.from(this.$items.values()).every(e,t)},e.prototype.some=function(e,t){return Array.from(this.$items.values()).some(e,t)},e.prototype.forEach=function(e,t){Array.from(this.$items.values()).forEach(e,t)},e.prototype.map=function(e,t){return Array.from(this.$items.values()).map(e,t)},e.prototype.filter=function(e,t){return Array.from(this.$items.values()).filter(e,t)},e.prototype.reduce=function(e,t){return Array.from(this.$items.values()).reduce(e,t)},e.prototype.reduceRight=function(e,t){return Array.from(this.$items.values()).reduceRight(e,t)},e.prototype.find=function(e,t){return Array.from(this.$items.values()).find(e,t)},e.prototype.findIndex=function(e,t){return Array.from(this.$items.values()).findIndex(e,t)},e.prototype.fill=function(e,t,n){throw new Error("ArraySchema#fill() not implemented")},e.prototype.copyWithin=function(e,t,n){throw new Error("ArraySchema#copyWithin() not implemented")},e.prototype.toString=function(){return this.$items.toString()},e.prototype.toLocaleString=function(){return this.$items.toLocaleString()},e.prototype[Symbol.iterator]=function(){return Array.from(this.$items.values())[Symbol.iterator]()},e.prototype[Symbol.unscopables]=function(){return this.$items[Symbol.unscopables]()},e.prototype.entries=function(){return this.$items.entries()},e.prototype.keys=function(){return this.$items.keys()},e.prototype.values=function(){return this.$items.values()},e.prototype.includes=function(e,t){return Array.from(this.$items.values()).includes(e,t)},e.prototype.flatMap=function(e,t){throw new Error("ArraySchema#flatMap() is not supported.")},e.prototype.flat=function(e){throw new Error("ArraySchema#flat() is not supported.")},e.prototype.setIndex=function(e,t){this.$indexes.set(e,t)},e.prototype.getIndex=function(e){return this.$indexes.get(e)},e.prototype.getByIndex=function(e){return this.$items.get(this.$indexes.get(e))},e.prototype.deleteByIndex=function(e){var t=this.$indexes.get(e);this.$items.delete(t),this.$indexes.delete(e)},e.prototype.toArray=function(){return Array.from(this.$items.values())},e.prototype.toJSON=function(){return this.toArray().map((function(e){return"function"==typeof e.toJSON?e.toJSON():e}))},e.prototype.clone=function(t){return t?new(e.bind.apply(e,i([void 0],Array.from(this.$items.values())))):new(e.bind.apply(e,i([void 0],this.map((function(e){return e.$changes?e.clone():e})))))},e.prototype.triggerAll=function(){a.Schema.prototype.triggerAll.apply(this)},e}();t.ArraySchema=f,c.registerType("array",{constructor:f,getProxy:l})},611:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CollectionSchema=void 0;var r=n(377),i=n(787),o=n(898),s=n(421),a=function(){function e(e){var t=this;this.$changes=new r.ChangeTree(this),this.$items=new Map,this.$indexes=new Map,this.$refId=0,e&&e.forEach((function(e){return t.add(e)}))}return e.is=function(e){return void 0!==e.collection},e.prototype.add=function(e){var t=this.$refId++;return void 0!==e.$changes&&e.$changes.setParent(this,this.$changes.root,t),this.$changes.indexes[t]=t,this.$indexes.set(t,t),this.$items.set(t,e),this.$changes.change(t),t},e.prototype.at=function(e){var t=Array.from(this.$items.keys())[e];return this.$items.get(t)},e.prototype.entries=function(){return this.$items.entries()},e.prototype.delete=function(e){for(var t,n,r=this.$items.entries();(n=r.next())&&!n.done;)if(e===n.value[1]){t=n.value[0];break}return void 0!==t&&(this.$changes.delete(t),this.$indexes.delete(t),this.$items.delete(t))},e.prototype.clear=function(e){var t=this;this.$changes.discard(!0,!0),this.$changes.indexes={},this.$indexes.clear(),e&&"string"!=typeof this.$changes.getType()&&this.$items.forEach((function(e){t.$changes.root.removeRef(e.$changes.refId)})),this.$items.clear(),this.$changes.operation({index:0,op:i.OPERATION.CLEAR}),this.$changes.touchParents()},e.prototype.has=function(e){return Array.from(this.$items.values()).some((function(t){return t===e}))},e.prototype.forEach=function(e){var t=this;this.$items.forEach((function(n,r,i){return e(n,r,t)}))},e.prototype.values=function(){return this.$items.values()},Object.defineProperty(e.prototype,"size",{get:function(){return this.$items.size},enumerable:!1,configurable:!0}),e.prototype.setIndex=function(e,t){this.$indexes.set(e,t)},e.prototype.getIndex=function(e){return this.$indexes.get(e)},e.prototype.getByIndex=function(e){return this.$items.get(this.$indexes.get(e))},e.prototype.deleteByIndex=function(e){var t=this.$indexes.get(e);this.$items.delete(t),this.$indexes.delete(e)},e.prototype.toArray=function(){return Array.from(this.$items.values())},e.prototype.toJSON=function(){var e=[];return this.forEach((function(t,n){e.push("function"==typeof t.toJSON?t.toJSON():t)})),e},e.prototype.clone=function(t){var n;if(t)n=Object.assign(new e,this);else{var r=new e;this.forEach((function(e){e.$changes?r.add(e.clone()):r.add(e)}))}return n},e.prototype.triggerAll=function(){o.Schema.prototype.triggerAll.apply(this)},e}();t.CollectionSchema=a,s.registerType("collection",{constructor:a})},582:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MapSchema=t.getMapProxy=void 0;var r=n(377),i=n(787),o=n(898),s=n(421);function a(e){return e.$proxy=!0,new Proxy(e,{get:function(e,t){return"symbol"!=typeof t&&void 0===e[t]?e.get(t):e[t]},set:function(e,t,n){return"symbol"!=typeof t&&-1===t.indexOf("$")&&"onAdd"!==t&&"onRemove"!==t&&"onChange"!==t?e.set(t,n):e[t]=n,!0},deleteProperty:function(e,t){return e.delete(t),!0}})}t.getMapProxy=a;var c=function(){function e(e){var t=this;if(this.$changes=new r.ChangeTree(this),this.$items=new Map,this.$indexes=new Map,this.$refId=0,e)if(e instanceof Map)e.forEach((function(e,n){return t.set(n,e)}));else for(var n in e)this.set(n,e[n])}return e.is=function(e){return void 0!==e.map},e.prototype[Symbol.iterator]=function(){return this.$items[Symbol.iterator]()},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return this.$items[Symbol.toStringTag]},enumerable:!1,configurable:!0}),e.prototype.set=function(e,t){var n=void 0!==this.$changes.indexes[e],r=n?this.$changes.indexes[e]:this.$refId++,o=n?i.OPERATION.REPLACE:i.OPERATION.ADD,s=void 0!==t.$changes;return s&&t.$changes.setParent(this,this.$changes.root,r),n?s&&this.$items.get(e)!==t&&(o=i.OPERATION.ADD):(this.$changes.indexes[e]=r,this.$indexes.set(r,e)),this.$items.set(e,t),this.$changes.change(e,o),this},e.prototype.get=function(e){return this.$items.get(e)},e.prototype.delete=function(e){return this.$changes.delete(e),this.$items.delete(e)},e.prototype.clear=function(e){var t=this;this.$changes.discard(!0,!0),this.$changes.indexes={},this.$indexes.clear(),e&&"string"!=typeof this.$changes.getType()&&this.$items.forEach((function(e){t.$changes.root.removeRef(e.$changes.refId)})),this.$items.clear(),this.$changes.operation({index:0,op:i.OPERATION.CLEAR}),this.$changes.touchParents()},e.prototype.has=function(e){return this.$items.has(e)},e.prototype.forEach=function(e){this.$items.forEach(e)},e.prototype.entries=function(){return this.$items.entries()},e.prototype.keys=function(){return this.$items.keys()},e.prototype.values=function(){return this.$items.values()},Object.defineProperty(e.prototype,"size",{get:function(){return this.$items.size},enumerable:!1,configurable:!0}),e.prototype.setIndex=function(e,t){this.$indexes.set(e,t)},e.prototype.getIndex=function(e){return this.$indexes.get(e)},e.prototype.getByIndex=function(e){return this.$items.get(this.$indexes.get(e))},e.prototype.deleteByIndex=function(e){var t=this.$indexes.get(e);this.$items.delete(t),this.$indexes.delete(e)},e.prototype.toJSON=function(){var e={};return this.forEach((function(t,n){e[n]="function"==typeof t.toJSON?t.toJSON():t})),e},e.prototype.clone=function(t){var n;if(t)n=Object.assign(new e,this);else{var r=new e;this.forEach((function(e,t){e.$changes?r.set(t,e.clone()):r.set(t,e)}))}return n},e.prototype.triggerAll=function(){o.Schema.prototype.triggerAll.apply(this)},e}();t.MapSchema=c,s.registerType("map",{constructor:c,getProxy:a})},317:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SetSchema=void 0;var r=n(377),i=n(787),o=n(898),s=n(421),a=function(){function e(e){var t=this;this.$changes=new r.ChangeTree(this),this.$items=new Map,this.$indexes=new Map,this.$refId=0,e&&e.forEach((function(e){return t.add(e)}))}return e.is=function(e){return void 0!==e.set},e.prototype.add=function(e){if(this.has(e))return!1;var t=this.$refId++;return void 0!==e.$changes&&e.$changes.setParent(this,this.$changes.root,t),this.$changes.indexes[t]=t,this.$indexes.set(t,t),this.$items.set(t,e),this.$changes.change(t),t},e.prototype.entries=function(){return this.$items.entries()},e.prototype.delete=function(e){for(var t,n,r=this.$items.entries();(n=r.next())&&!n.done;)if(e===n.value[1]){t=n.value[0];break}return void 0!==t&&(this.$changes.delete(t),this.$indexes.delete(t),this.$items.delete(t))},e.prototype.clear=function(e){var t=this;this.$changes.discard(!0,!0),this.$changes.indexes={},this.$indexes.clear(),e&&"string"!=typeof this.$changes.getType()&&this.$items.forEach((function(e){t.$changes.root.removeRef(e.$changes.refId)})),this.$items.clear(),this.$changes.operation({index:0,op:i.OPERATION.CLEAR}),this.$changes.touchParents()},e.prototype.has=function(e){for(var t,n=this.$items.values(),r=!1;(t=n.next())&&!t.done;)if(e===t.value){r=!0;break}return r},e.prototype.forEach=function(e){var t=this;this.$items.forEach((function(n,r,i){return e(n,r,t)}))},e.prototype.values=function(){return this.$items.values()},Object.defineProperty(e.prototype,"size",{get:function(){return this.$items.size},enumerable:!1,configurable:!0}),e.prototype.setIndex=function(e,t){this.$indexes.set(e,t)},e.prototype.getIndex=function(e){return this.$indexes.get(e)},e.prototype.getByIndex=function(e){return this.$items.get(this.$indexes.get(e))},e.prototype.deleteByIndex=function(e){var t=this.$indexes.get(e);this.$items.delete(t),this.$indexes.delete(e)},e.prototype.toArray=function(){return Array.from(this.$items.values())},e.prototype.toJSON=function(){var e=[];return this.forEach((function(t,n){e.push("function"==typeof t.toJSON?t.toJSON():t)})),e},e.prototype.clone=function(t){var n;if(t)n=Object.assign(new e,this);else{var r=new e;this.forEach((function(e){e.$changes?r.add(e.clone()):r.add(e)}))}return n},e.prototype.triggerAll=function(){o.Schema.prototype.triggerAll.apply(this)},e}();t.SetSchema=a,s.registerType("set",{constructor:a})},421:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getType=t.registerType=void 0;var n={};t.registerType=function(e,t){n[e]=t},t.getType=function(e){return n[e]}},793:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dumpChanges=void 0,t.dumpChanges=function(e){for(var t=[e.$changes],n={},r=n,i=function(e){var n=t[e];n.changes.forEach((function(e){var t=n.ref,i=e.index,o=t._definition?t._definition.fieldsByIndex[i]:t.$indexes.get(i);r[o]=n.getValue(i)}))},o=0;o<1;o++)i(o);return n}},416:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(127),i=function(){function e(e){this.listeners=[],this.matcherPlaceholders={":id":/^([a-zA-Z0-9\-_]+)$/,":number":/^([0-9]+)$/,":string":/^(\w+)$/,":axis":/^([xyz])$/,":*":/(.*)/},this.state=e,this.reset()}return e.prototype.set=function(e){var t=r.compare(this.state,e);return this.state=e,this.checkPatches(t,this.listeners,this.defaultListener),t},e.prototype.registerPlaceholder=function(e,t){this.matcherPlaceholders[e]=t},e.prototype.listen=function(e,t,n){var i,o=this;"function"==typeof e?(i=[],t=e):i=e.split("/"),t.length>1&&console.warn(".listen() accepts only one parameter.");var s={callback:t,rawRules:i,rules:i.map((function(e){return"string"==typeof e?0===e.indexOf(":")?o.matcherPlaceholders[e]||o.matcherPlaceholders[":*"]:new RegExp("^"+e+"$"):e}))};return 0===i.length?this.defaultListener=s:this.listeners.push(s),n&&this.checkPatches(r.compare({},this.state),[s]),s},e.prototype.removeListener=function(e){for(var t=this.listeners.length-1;t>=0;t--)this.listeners[t]===e&&this.listeners.splice(t,1)},e.prototype.removeAllListeners=function(){this.reset()},e.prototype.checkPatches=function(e,t,n){for(var r=0,i=t.length;r<i;r++)for(var o=t[r],s=e.length-1;s>=0;s--){var a=o&&this.getPathVariables(e[s],o);a&&(o.callback({path:a,rawPath:e[s].path,operation:e[s].operation,value:e[s].value}),e[s].matched=!0)}if(n)for(s=e.length-1;s>=0;s--)e[s].matched||n.callback(e[s])},e.prototype.getPathVariables=function(e,t){if(e.path.length!==t.rules.length)return!1;for(var n={},r=0,i=t.rules.length;r<i;r++){var o=e.path[r].match(t.rules[r]);if(!o||0===o.length||o.length>2)return!1;":"===t.rawRules[r].substr(0,1)&&(n[t.rawRules[r].substr(1)]=o[1])}return n},e.prototype.reset=function(){this.listeners=[]},e}();t.StateContainer=i},127:(e,t)=>{"use strict";function n(e,t){var n=e.slice();return n.push(t),n}function r(e){if(Array.isArray(e)){for(var t=new Array(e.length),n=0;n<t.length;n++)t[n]=""+n;return t}if(Object.keys)return Object.keys(e);var r=[];for(var i in e)e.hasOwnProperty(i)&&r.push(i);return r}function i(e,t,o,s){for(var a=r(t),c=r(e),u=!1,l=c.length-1;l>=0;l--){var f=e[d=c[l]];if(!t.hasOwnProperty(d)||void 0===t[d]&&void 0!==f&&!1===Array.isArray(t))o.push({operation:"remove",path:n(s,d)}),u=!0;else{var h=t[d];"object"==typeof f&&null!=f&&"object"==typeof h&&null!=h?i(f,h,o,n(s,d)):f!==h&&o.push({operation:"replace",path:n(s,d),value:h,previousValue:f})}}if(u||a.length!=c.length)for(l=a.length-1;l>=0;l--){var d=a[l];if(!e.hasOwnProperty(d)&&void 0!==t[d]){h=t[d];var p=n(s,d);"object"==typeof h&&null!=h&&i({},h,o,p),o.push({operation:"add",path:p,value:h})}}}Object.defineProperty(t,"__esModule",{value:!0}),t.compare=function(e,t){var n=[];return i(e,t,n,[]),n}},449:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(416);t.StateContainer=r.StateContainer},677:(e,t)=>{"use strict";t.R=function(e,t){return new r(n[e],t)};var n={exponential:function(e,t){return Math.floor(Math.random()*Math.pow(2,e)*t)},fibonacci:function(e,t){if(e>(r=1))for(var n=1,r=2,i=2;i<e;i++){var o=n+r;n=r,r=o}return Math.floor(Math.random()*r*t)}};function r(e,t){this.func=e,this.attempts=0,this.delay=void 0!==t.initialDelay?t.initialDelay:100}r.prototype.backoff=function(){setTimeout(this.onReady,this.func(++this.attempts,this.delay))}},73:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=n(677).R,s="undefined"!=typeof WebSocket?WebSocket:n(418),a=function(){function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};i(this,e),this.url=t,this.protocols=n,this.reconnectEnabled=!0,this.listeners={},this.backoff=o(r.backoff||"exponential",r),this.backoff.onReady=this.onBackoffReady.bind(this),(void 0===r.connect||r.connect)&&this.open()}return r(e,[{key:"open",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.isReconnect=e;var t=this.ws&&this.ws.binaryType;this.ws=new s(this.url,this.protocols),this.ws.onclose=this.onCloseCallback.bind(this),this.ws.onerror=this.onErrorCallback.bind(this),this.ws.onmessage=this.onMessageCallback.bind(this),this.ws.onopen=this.onOpenCallback.bind(this),t&&(this.ws.binaryType=t)}},{key:"onBackoffReady",value:function(e,t){this.open(!0)}},{key:"onCloseCallback",value:function(e){!this.isReconnect&&this.listeners.onclose&&this.listeners.onclose.apply(null,arguments),this.reconnectEnabled&&e.code<3e3&&this.backoff.backoff()}},{key:"onErrorCallback",value:function(){this.listeners.onerror&&this.listeners.onerror.apply(null,arguments)}},{key:"onMessageCallback",value:function(){this.listeners.onmessage&&this.listeners.onmessage.apply(null,arguments)}},{key:"onOpenCallback",value:function(){this.listeners.onopen&&this.listeners.onopen.apply(null,arguments),this.isReconnect&&this.listeners.onreconnect&&this.listeners.onreconnect.apply(null,arguments),this.isReconnect=!1}},{key:"close",value:function(e,t){void 0===e&&(e=1e3),this.reconnectEnabled=!1,this.ws.close(e,t)}},{key:"send",value:function(e){this.ws.send(e)}},{key:"bufferedAmount",get:function(){return this.ws.bufferedAmount}},{key:"readyState",get:function(){return this.ws.readyState}},{key:"binaryType",get:function(){return this.ws.binaryType},set:function(e){this.ws.binaryType=e}},{key:"extensions",get:function(){return this.ws.extensions},set:function(e){this.ws.extensions=e}},{key:"protocol",get:function(){return this.ws.protocol},set:function(e){this.ws.protocol=e}},{key:"onclose",set:function(e){this.listeners.onclose=e},get:function(){return this.listeners.onclose}},{key:"onerror",set:function(e){this.listeners.onerror=e},get:function(){return this.listeners.onerror}},{key:"onmessage",set:function(e){this.listeners.onmessage=e},get:function(){return this.listeners.onmessage}},{key:"onopen",set:function(e){this.listeners.onopen=e},get:function(){return this.listeners.onopen}},{key:"onreconnect",set:function(e){this.listeners.onreconnect=e},get:function(){return this.listeners.onreconnect}}]),e}();a.CONNECTING=s.CONNECTING,a.OPEN=s.OPEN,a.CLOSING=s.CLOSING,a.CLOSED=s.CLOSED,t.default=a},63:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Auth=t.Platform=void 0;var c,u=o(n(408)),l=n(723),f="colyseus-auth-token";(c=t.Platform||(t.Platform={})).ios="ios",c.android="android";var h=function(){function e(e){var t=this;this._id=void 0,this.username=void 0,this.displayName=void 0,this.avatarUrl=void 0,this.isAnonymous=void 0,this.email=void 0,this.lang=void 0,this.location=void 0,this.timezone=void 0,this.metadata=void 0,this.devices=void 0,this.facebookId=void 0,this.twitterId=void 0,this.googleId=void 0,this.gameCenterId=void 0,this.steamId=void 0,this.friendIds=void 0,this.blockedUserIds=void 0,this.createdAt=void 0,this.updatedAt=void 0,this.token=void 0,this.endpoint=e.replace("ws","http"),l.getItem(f,(function(e){return t.token=e}))}return Object.defineProperty(e.prototype,"hasToken",{get:function(){return!!this.token},enumerable:!1,configurable:!0}),e.prototype.login=function(e){return void 0===e&&(e={}),s(this,void 0,void 0,(function(){var t,n,r;return a(this,(function(i){switch(i.label){case 0:return t=Object.assign({},e),this.hasToken&&(t.token=this.token),[4,this.request("post","/auth",t)];case 1:for(r in n=i.sent(),this.token=n.token,l.setItem(f,this.token),n)this.hasOwnProperty(r)&&(this[r]=n[r]);return this.registerPingService(),[2,this]}}))}))},e.prototype.save=function(){return s(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.request("put","/auth",{},{username:this.username,displayName:this.displayName,avatarUrl:this.avatarUrl,lang:this.lang,location:this.location,timezone:this.timezone})];case 1:return e.sent(),[2,this]}}))}))},e.prototype.getFriends=function(){return s(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.request("get","/friends/all")];case 1:return[2,e.sent()]}}))}))},e.prototype.getOnlineFriends=function(){return s(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.request("get","/friends/online")];case 1:return[2,e.sent()]}}))}))},e.prototype.getFriendRequests=function(){return s(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.request("get","/friends/requests")];case 1:return[2,e.sent()]}}))}))},e.prototype.sendFriendRequest=function(e){return s(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.request("post","/friends/requests",{userId:e})];case 1:return[2,t.sent()]}}))}))},e.prototype.acceptFriendRequest=function(e){return s(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.request("put","/friends/requests",{userId:e})];case 1:return[2,t.sent()]}}))}))},e.prototype.declineFriendRequest=function(e){return s(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.request("del","/friends/requests",{userId:e})];case 1:return[2,t.sent()]}}))}))},e.prototype.blockUser=function(e){return s(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.request("post","/friends/block",{userId:e})];case 1:return[2,t.sent()]}}))}))},e.prototype.unblockUser=function(e){return s(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.request("put","/friends/block",{userId:e})];case 1:return[2,t.sent()]}}))}))},e.prototype.request=function(e,t,n,r,i){return void 0===n&&(n={}),void 0===i&&(i={}),s(this,void 0,void 0,(function(){var o,s,c,l;return a(this,(function(a){switch(a.label){case 0:for(s in i.Accept="application/json",this.hasToken&&(i.Authorization="Bearer "+this.token),o=[],n)o.push(s+"="+n[s]);return c=o.length>0?"?"+o.join("&"):"",l={headers:i},r&&(l.body=r),[4,u[e](""+this.endpoint+t+c,l)];case 1:return[2,a.sent().data]}}))}))},e.prototype.logout=function(){this.token=void 0,l.removeItem(f),this.unregisterPingService()},e.prototype.registerPingService=function(e){var t=this;void 0===e&&(e=15e3),this.unregisterPingService(),this.keepOnlineInterval=setInterval((function(){return t.request("get","/auth")}),e)},e.prototype.unregisterPingService=function(){clearInterval(this.keepOnlineInterval)},e}();t.Auth=h},705:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Client=t.MatchMakeError=void 0;var a=n(408),c=n(199),u=n(270),l=n(63),f=n(742),h=function(e){function t(n,r){var i=e.call(this,n)||this;return i.code=r,Object.setPrototypeOf(i,t.prototype),i}return i(t,e),t}(Error);t.MatchMakeError=h;var d=function(){function e(e){void 0===e&&(e=location.protocol.replace("http","ws")+"//"+location.hostname+(location.port&&":"+location.port)),this.endpoint=e,this.auth=new l.Auth(this.endpoint),this.push=new f.Push(this.endpoint)}return e.prototype.joinOrCreate=function(e,t,n){return void 0===t&&(t={}),o(this,void 0,void 0,(function(){return s(this,(function(r){switch(r.label){case 0:return[4,this.createMatchMakeRequest("joinOrCreate",e,t,n)];case 1:return[2,r.sent()]}}))}))},e.prototype.create=function(e,t,n){return void 0===t&&(t={}),o(this,void 0,void 0,(function(){return s(this,(function(r){switch(r.label){case 0:return[4,this.createMatchMakeRequest("create",e,t,n)];case 1:return[2,r.sent()]}}))}))},e.prototype.join=function(e,t,n){return void 0===t&&(t={}),o(this,void 0,void 0,(function(){return s(this,(function(r){switch(r.label){case 0:return[4,this.createMatchMakeRequest("join",e,t,n)];case 1:return[2,r.sent()]}}))}))},e.prototype.joinById=function(e,t,n){return void 0===t&&(t={}),o(this,void 0,void 0,(function(){return s(this,(function(r){switch(r.label){case 0:return[4,this.createMatchMakeRequest("joinById",e,t,n)];case 1:return[2,r.sent()]}}))}))},e.prototype.reconnect=function(e,t,n){return o(this,void 0,void 0,(function(){return s(this,(function(r){switch(r.label){case 0:return[4,this.createMatchMakeRequest("joinById",e,{sessionId:t},n)];case 1:return[2,r.sent()]}}))}))},e.prototype.getAvailableRooms=function(e){return void 0===e&&(e=""),o(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.endpoint.replace("ws","http")+"/matchmake/"+e,[4,a.get(t,{headers:{Accept:"application/json"}})];case 1:return[2,n.sent().data]}}))}))},e.prototype.consumeSeatReservation=function(e,t){return o(this,void 0,void 0,(function(){var n;return s(this,(function(r){return(n=this.createRoom(e.room.name,t)).id=e.room.roomId,n.sessionId=e.sessionId,n.connect(this.buildEndpoint(e.room,{sessionId:n.sessionId})),[2,new Promise((function(e,t){var r=function(e,n){return t(new c.ServerError(e,n))};n.onError.once(r),n.onJoin.once((function(){n.onError.remove(r),e(n)}))}))]}))}))},e.prototype.createMatchMakeRequest=function(e,t,n,r){return void 0===n&&(n={}),o(this,void 0,void 0,(function(){var i,o;return s(this,(function(s){switch(s.label){case 0:return i=this.endpoint.replace("ws","http")+"/matchmake/"+e+"/"+t,this.auth.hasToken&&(n.token=this.auth.token),[4,a.post(i,{headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)})];case 1:if((o=s.sent().data).error)throw new h(o.error,o.code);return[2,this.consumeSeatReservation(o,r)]}}))}))},e.prototype.createRoom=function(e,t){return new u.Room(e,t)},e.prototype.buildEndpoint=function(e,t){void 0===t&&(t={});var n=[];for(var r in t)t.hasOwnProperty(r)&&n.push(r+"="+t[r]);return this.endpoint+"/"+e.processId+"/"+e.roomId+"?"+n.join("&")},e}();t.Client=d},826:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0;var s=o(n(73)),a=function(e){function t(t,n){void 0===n&&(n=!0);var r=e.call(this,t,void 0,{connect:n})||this;return r._enqueuedCalls=[],r}return i(t,e),t.prototype.onOpenCallback=function(t){if(e.prototype.onOpenCallback.call(this),this.binaryType="arraybuffer",this._enqueuedCalls.length>0){for(var n=0,r=this._enqueuedCalls;n<r.length;n++){var i=r[n],o=i[0],s=i[1];this[o].apply(this,s)}this._enqueuedCalls=[]}},t.prototype.send=function(t){if(this.ws.readyState===s.default.OPEN){if(t instanceof ArrayBuffer)return e.prototype.send.call(this,t);if(Array.isArray(t))return e.prototype.send.call(this,new Uint8Array(t).buffer)}else this._enqueuedCalls.push(["send",[t]])},t}(s.default);t.Connection=a},845:(e,t)=>{"use strict";var n,r;Object.defineProperty(t,"__esModule",{value:!0}),t.utf8Length=t.utf8Read=t.ErrorCode=t.Protocol=void 0,(r=t.Protocol||(t.Protocol={}))[r.HANDSHAKE=9]="HANDSHAKE",r[r.JOIN_ROOM=10]="JOIN_ROOM",r[r.ERROR=11]="ERROR",r[r.LEAVE_ROOM=12]="LEAVE_ROOM",r[r.ROOM_DATA=13]="ROOM_DATA",r[r.ROOM_STATE=14]="ROOM_STATE",r[r.ROOM_STATE_PATCH=15]="ROOM_STATE_PATCH",r[r.ROOM_DATA_SCHEMA=16]="ROOM_DATA_SCHEMA",(n=t.ErrorCode||(t.ErrorCode={}))[n.MATCHMAKE_NO_HANDLER=4210]="MATCHMAKE_NO_HANDLER",n[n.MATCHMAKE_INVALID_CRITERIA=4211]="MATCHMAKE_INVALID_CRITERIA",n[n.MATCHMAKE_INVALID_ROOM_ID=4212]="MATCHMAKE_INVALID_ROOM_ID",n[n.MATCHMAKE_UNHANDLED=4213]="MATCHMAKE_UNHANDLED",n[n.MATCHMAKE_EXPIRED=4214]="MATCHMAKE_EXPIRED",n[n.AUTH_FAILED=4215]="AUTH_FAILED",n[n.APPLICATION_ERROR=4216]="APPLICATION_ERROR",t.utf8Read=function(e,t){for(var n=e[t++],r="",i=0,o=t,s=t+n;o<s;o++){var a=e[o];if(0!=(128&a))if(192!=(224&a))if(224!=(240&a)){if(240!=(248&a))throw new Error("Invalid byte "+a.toString(16));(i=(7&a)<<18|(63&e[++o])<<12|(63&e[++o])<<6|(63&e[++o])<<0)>=65536?(i-=65536,r+=String.fromCharCode(55296+(i>>>10),56320+(1023&i))):r+=String.fromCharCode(i)}else r+=String.fromCharCode((15&a)<<12|(63&e[++o])<<6|(63&e[++o])<<0);else r+=String.fromCharCode((31&a)<<6|63&e[++o]);else r+=String.fromCharCode(a)}return r},t.utf8Length=function(e){void 0===e&&(e="");for(var t=0,n=0,r=0,i=e.length;r<i;r++)(t=e.charCodeAt(r))<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n+1}},742:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Push=void 0;var i=function(){function e(e){this.endpoint=e.replace("ws","http")}return e.prototype.register=function(){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return this.check(),[4,this.registerServiceWorker()];case 1:return e.sent(),[4,this.requestNotificationPermission()];case 2:return e.sent(),[2]}}))}))},e.prototype.registerServiceWorker=function(){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,navigator.serviceWorker.register(this.endpoint+"/push")];case 1:return[2,e.sent()]}}))}))},e.prototype.requestNotificationPermission=function(){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,window.Notification.requestPermission()];case 1:if("granted"!==e.sent())throw new Error("Permission not granted for Notification");return[2]}}))}))},e.prototype.check=function(){if(!("serviceWorker"in navigator))throw new Error("No Service Worker support!");if(!("PushManager"in window))throw new Error("No Push API Support!")},e}();t.Push=i},270:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Room=void 0;var s=o(n(736)),a=n(703),c=n(593),u=n(826),l=n(944),f=n(845),h=o(n(163)),d=o(n(357)),p=function(){function e(e,t){var n=this;this.onStateChange=a.createSignal(),this.onError=a.createSignal(),this.onLeave=a.createSignal(),this.onJoin=a.createSignal(),this.hasJoined=!1,this.onMessageHandlers=c.createNanoEvents(),this.id=null,this.name=e,t&&(this.serializer=new(l.getSerializer("schema")),this.rootSchema=t,this.serializer.state=new t),this.onError((function(e,t){return console.warn("colyseus.js - onError => ("+e+") "+t)})),this.onLeave((function(){return n.removeAllListeners()}))}return e.prototype.connect=function(e){var t=this;this.connection=new u.Connection(e,!1),this.connection.reconnectEnabled=!1,this.connection.onmessage=this.onMessageCallback.bind(this),this.connection.onclose=function(e){if(!t.hasJoined)return console.warn("Room connection was closed unexpectedly ("+e.code+"): "+e.reason),void t.onError.invoke(e.code,e.reason);t.onLeave.invoke(e.code)},this.connection.onerror=function(e){console.warn("Room, onError ("+e.code+"): "+e.reason),t.onError.invoke(e.code,e.reason)},this.connection.open()},e.prototype.leave=function(e){void 0===e&&(e=!0),this.connection?e?this.connection.send([f.Protocol.LEAVE_ROOM]):this.connection.close():this.onLeave.invoke(4e3)},e.prototype.onMessage=function(e,t){return this.onMessageHandlers.on(this.getMessageHandlerKey(e),t)},e.prototype.send=function(e,t){var n,r=[f.Protocol.ROOM_DATA];if("string"==typeof e?h.string(r,e):h.number(r,e),void 0!==t){var i=s.encode(t);(n=new Uint8Array(r.length+i.byteLength)).set(new Uint8Array(r),0),n.set(new Uint8Array(i),r.length)}else n=new Uint8Array(r);this.connection.send(n.buffer)},Object.defineProperty(e.prototype,"state",{get:function(){return this.serializer.getState()},enumerable:!1,configurable:!0}),e.prototype.listen=function(e,t,n){if("schema"!==this.serializerId)return this.serializerId||console.warn("room.Listen() should be called after room.onJoin has been called (DEPRECATION WARNING)"),this.serializer.api.listen(e,t,n);console.warn("'"+this.serializerId+"' serializer doesn't support .listen() method here.")},e.prototype.removeListener=function(e){return this.serializer.api.removeListener(e)},e.prototype.removeAllListeners=function(){this.serializer&&this.serializer.teardown(),this.onJoin.clear(),this.onStateChange.clear(),this.onError.clear(),this.onLeave.clear(),this.onMessageHandlers.events={}},e.prototype.onMessageCallback=function(e){var t=Array.from(new Uint8Array(e.data)),n=t[0];if(n===f.Protocol.JOIN_ROOM){var r=1;if(this.serializerId=f.utf8Read(t,r),r+=f.utf8Length(this.serializerId),!this.serializer){var i=l.getSerializer(this.serializerId);this.serializer=new i}t.length>r&&this.serializer.handshake&&this.serializer.handshake(t,{offset:r}),this.hasJoined=!0,this.onJoin.invoke(),this.connection.send([f.Protocol.JOIN_ROOM])}else if(n===f.Protocol.ERROR){var o={offset:1},a=d.number(t,o),c=d.string(t,o);this.onError.invoke(a,c)}else if(n===f.Protocol.LEAVE_ROOM)this.leave();else if(n===f.Protocol.ROOM_DATA_SCHEMA){var u={offset:1};(c=new(p=this.serializer.getState().constructor._context.get(d.number(t,u)))).decode(t,u),this.dispatchMessage(p,c)}else if(n===f.Protocol.ROOM_STATE)t.shift(),this.setState(t);else if(n===f.Protocol.ROOM_STATE_PATCH)t.shift(),this.patch(t);else if(n===f.Protocol.ROOM_DATA){var h={offset:1},p=d.stringCheck(t,h)?d.string(t,h):d.number(t,h);c=t.length>h.offset?s.decode(e.data,h.offset):void 0,this.dispatchMessage(p,c)}},e.prototype.setState=function(e){this.serializer.setState(e),this.onStateChange.invoke(this.serializer.getState())},e.prototype.patch=function(e){this.serializer.patch(e),this.onStateChange.invoke(this.serializer.getState())},e.prototype.dispatchMessage=function(e,t){var n=this.getMessageHandlerKey(e);this.onMessageHandlers.events[n]?this.onMessageHandlers.emit(n,t):this.onMessageHandlers.events["*"]?this.onMessageHandlers.emit("*",e,t):console.warn("onMessage not registered for type '"+e+"'.")},e.prototype.getMessageHandlerKey=function(e){switch(typeof e){case"function":return"$"+e._typeid;case"string":return e;case"number":return"i"+e;default:throw new Error("invalid message type.")}},e}();t.Room=p},723:(e,t)=>{"use strict";var n;function r(){return n||(n="undefined"!=typeof cc&&cc.sys&&cc.sys.localStorage?cc.sys.localStorage:"undefined"!=typeof window&&window.localStorage?window.localStorage:{cache:{},setItem:function(e,t){this.cache[e]=t},getItem:function(e){this.cache[e]},removeItem:function(e){delete this.cache[e]}}),n}Object.defineProperty(t,"__esModule",{value:!0}),t.getItem=t.removeItem=t.setItem=void 0,t.setItem=function(e,t){r().setItem(e,t)},t.removeItem=function(e){r().removeItem(e)},t.getItem=function(e,t){var n=r().getItem(e);"undefined"!=typeof Promise&&n instanceof Promise?n.then((function(e){return t(e)})):t(n)}},199:function(e,t){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ServerError=void 0;var i=function(e){function t(t,n){var r=e.call(this,n)||this;return r.name="ServerError",r.code=t,r}return r(t,e),t}(Error);t.ServerError=i},767:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SchemaSerializer=t.FossilDeltaSerializer=t.registerSerializer=void 0,n(331);var r=n(705);Object.defineProperty(t,"Client",{enumerable:!0,get:function(){return r.Client}});var i=n(845);Object.defineProperty(t,"Protocol",{enumerable:!0,get:function(){return i.Protocol}}),Object.defineProperty(t,"ErrorCode",{enumerable:!0,get:function(){return i.ErrorCode}});var o=n(270);Object.defineProperty(t,"Room",{enumerable:!0,get:function(){return o.Room}});var s=n(63);Object.defineProperty(t,"Auth",{enumerable:!0,get:function(){return s.Auth}}),Object.defineProperty(t,"Platform",{enumerable:!0,get:function(){return s.Platform}});var a=n(91);Object.defineProperty(t,"FossilDeltaSerializer",{enumerable:!0,get:function(){return a.FossilDeltaSerializer}});var c=n(66);Object.defineProperty(t,"SchemaSerializer",{enumerable:!0,get:function(){return c.SchemaSerializer}});var u=n(197),l=n(944);Object.defineProperty(t,"registerSerializer",{enumerable:!0,get:function(){return l.registerSerializer}}),l.registerSerializer("fossil-delta",a.FossilDeltaSerializer),l.registerSerializer("schema",c.SchemaSerializer),l.registerSerializer("none",u.NoneSerializer)},331:()=>{ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return null!==e&&"object"==typeof e&&e.buffer instanceof ArrayBuffer})},736:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.encode=t.decode=void 0;var i=r(n(94)),o=r(n(329));t.decode=i.default,t.encode=o.default},94:(e,t)=>{"use strict";function n(e,t){if(this._offset=t,e instanceof ArrayBuffer)this._buffer=e,this._view=new DataView(this._buffer);else{if(!ArrayBuffer.isView(e))throw new Error("Invalid argument");this._buffer=e.buffer,this._view=new DataView(this._buffer,e.byteOffset,e.byteLength)}}Object.defineProperty(t,"__esModule",{value:!0}),n.prototype._array=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=this._parse();return t},n.prototype._map=function(e){for(var t={},n=0;n<e;n++)t[this._parse()]=this._parse();return t},n.prototype._str=function(e){var t=function(e,t,n){for(var r="",i=0,o=t,s=t+n;o<s;o++){var a=e.getUint8(o);if(0!=(128&a))if(192!=(224&a))if(224!=(240&a)){if(240!=(248&a))throw new Error("Invalid byte "+a.toString(16));(i=(7&a)<<18|(63&e.getUint8(++o))<<12|(63&e.getUint8(++o))<<6|(63&e.getUint8(++o))<<0)>=65536?(i-=65536,r+=String.fromCharCode(55296+(i>>>10),56320+(1023&i))):r+=String.fromCharCode(i)}else r+=String.fromCharCode((15&a)<<12|(63&e.getUint8(++o))<<6|(63&e.getUint8(++o))<<0);else r+=String.fromCharCode((31&a)<<6|63&e.getUint8(++o));else r+=String.fromCharCode(a)}return r}(this._view,this._offset,e);return this._offset+=e,t},n.prototype._bin=function(e){var t=this._buffer.slice(this._offset,this._offset+e);return this._offset+=e,t},n.prototype._parse=function(){var e,t=this._view.getUint8(this._offset++),n=0,r=0,i=0,o=0;if(t<192)return t<128?t:t<144?this._map(15&t):t<160?this._array(15&t):this._str(31&t);if(t>223)return-1*(255-t+1);switch(t){case 192:return null;case 194:return!1;case 195:return!0;case 196:return n=this._view.getUint8(this._offset),this._offset+=1,this._bin(n);case 197:return n=this._view.getUint16(this._offset),this._offset+=2,this._bin(n);case 198:return n=this._view.getUint32(this._offset),this._offset+=4,this._bin(n);case 199:return n=this._view.getUint8(this._offset),r=this._view.getInt8(this._offset+1),this._offset+=2,[r,this._bin(n)];case 200:return n=this._view.getUint16(this._offset),r=this._view.getInt8(this._offset+2),this._offset+=3,[r,this._bin(n)];case 201:return n=this._view.getUint32(this._offset),r=this._view.getInt8(this._offset+4),this._offset+=5,[r,this._bin(n)];case 202:return e=this._view.getFloat32(this._offset),this._offset+=4,e;case 203:return e=this._view.getFloat64(this._offset),this._offset+=8,e;case 204:return e=this._view.getUint8(this._offset),this._offset+=1,e;case 205:return e=this._view.getUint16(this._offset),this._offset+=2,e;case 206:return e=this._view.getUint32(this._offset),this._offset+=4,e;case 207:return i=this._view.getUint32(this._offset)*Math.pow(2,32),o=this._view.getUint32(this._offset+4),this._offset+=8,i+o;case 208:return e=this._view.getInt8(this._offset),this._offset+=1,e;case 209:return e=this._view.getInt16(this._offset),this._offset+=2,e;case 210:return e=this._view.getInt32(this._offset),this._offset+=4,e;case 211:return i=this._view.getInt32(this._offset)*Math.pow(2,32),o=this._view.getUint32(this._offset+4),this._offset+=8,i+o;case 212:return r=this._view.getInt8(this._offset),this._offset+=1,0===r?void(this._offset+=1):[r,this._bin(1)];case 213:return r=this._view.getInt8(this._offset),this._offset+=1,[r,this._bin(2)];case 214:return r=this._view.getInt8(this._offset),this._offset+=1,[r,this._bin(4)];case 215:return r=this._view.getInt8(this._offset),this._offset+=1,0===r?(i=this._view.getInt32(this._offset)*Math.pow(2,32),o=this._view.getUint32(this._offset+4),this._offset+=8,new Date(i+o)):[r,this._bin(8)];case 216:return r=this._view.getInt8(this._offset),this._offset+=1,[r,this._bin(16)];case 217:return n=this._view.getUint8(this._offset),this._offset+=1,this._str(n);case 218:return n=this._view.getUint16(this._offset),this._offset+=2,this._str(n);case 219:return n=this._view.getUint32(this._offset),this._offset+=4,this._str(n);case 220:return n=this._view.getUint16(this._offset),this._offset+=2,this._array(n);case 221:return n=this._view.getUint32(this._offset),this._offset+=4,this._array(n);case 222:return n=this._view.getUint16(this._offset),this._offset+=2,this._map(n);case 223:return n=this._view.getUint32(this._offset),this._offset+=4,this._map(n)}throw new Error("Could not parse")},t.default=function(e,t){void 0===t&&(t=0);var r=new n(e,t),i=r._parse();if(r._offset!==e.byteLength)throw new Error(e.byteLength-r._offset+" trailing bytes");return i}},329:(e,t)=>{"use strict";function n(e,t,n){for(var r=0,i=0,o=n.length;i<o;i++)(r=n.charCodeAt(i))<128?e.setUint8(t++,r):r<2048?(e.setUint8(t++,192|r>>6),e.setUint8(t++,128|63&r)):r<55296||r>=57344?(e.setUint8(t++,224|r>>12),e.setUint8(t++,128|r>>6&63),e.setUint8(t++,128|63&r)):(i++,r=65536+((1023&r)<<10|1023&n.charCodeAt(i)),e.setUint8(t++,240|r>>18),e.setUint8(t++,128|r>>12&63),e.setUint8(t++,128|r>>6&63),e.setUint8(t++,128|63&r))}function r(e,t,n){var i=typeof n,o=0,s=0,a=0,c=0,u=0,l=0;if("string"===i){if((u=function(e){for(var t=0,n=0,r=0,i=e.length;r<i;r++)(t=e.charCodeAt(r))<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n}(n))<32)e.push(160|u),l=1;else if(u<256)e.push(217,u),l=2;else if(u<65536)e.push(218,u>>8,u),l=3;else{if(!(u<4294967296))throw new Error("String too long");e.push(219,u>>24,u>>16,u>>8,u),l=5}return t.push({_str:n,_length:u,_offset:e.length}),l+u}if("number"===i)return Math.floor(n)===n&&isFinite(n)?n>=0?n<128?(e.push(n),1):n<256?(e.push(204,n),2):n<65536?(e.push(205,n>>8,n),3):n<4294967296?(e.push(206,n>>24,n>>16,n>>8,n),5):(a=n/Math.pow(2,32)>>0,c=n>>>0,e.push(207,a>>24,a>>16,a>>8,a,c>>24,c>>16,c>>8,c),9):n>=-32?(e.push(n),1):n>=-128?(e.push(208,n),2):n>=-32768?(e.push(209,n>>8,n),3):n>=-2147483648?(e.push(210,n>>24,n>>16,n>>8,n),5):(a=Math.floor(n/Math.pow(2,32)),c=n>>>0,e.push(211,a>>24,a>>16,a>>8,a,c>>24,c>>16,c>>8,c),9):(e.push(203),t.push({_float:n,_length:8,_offset:e.length}),9);if("object"===i){if(null===n)return e.push(192),1;if(Array.isArray(n)){if((u=n.length)<16)e.push(144|u),l=1;else if(u<65536)e.push(220,u>>8,u),l=3;else{if(!(u<4294967296))throw new Error("Array too large");e.push(221,u>>24,u>>16,u>>8,u),l=5}for(o=0;o<u;o++)l+=r(e,t,n[o]);return l}if(n instanceof Date){var f=n.getTime();return a=Math.floor(f/Math.pow(2,32)),c=f>>>0,e.push(215,0,a>>24,a>>16,a>>8,a,c>>24,c>>16,c>>8,c),10}if(n instanceof ArrayBuffer){if((u=n.byteLength)<256)e.push(196,u),l=2;else if(u<65536)e.push(197,u>>8,u),l=3;else{if(!(u<4294967296))throw new Error("Buffer too large");e.push(198,u>>24,u>>16,u>>8,u),l=5}return t.push({_bin:n,_length:u,_offset:e.length}),l+u}if("function"==typeof n.toJSON)return r(e,t,n.toJSON());var h=[],d="",p=Object.keys(n);for(o=0,s=p.length;o<s;o++)"function"!=typeof n[d=p[o]]&&h.push(d);if((u=h.length)<16)e.push(128|u),l=1;else if(u<65536)e.push(222,u>>8,u),l=3;else{if(!(u<4294967296))throw new Error("Object too large");e.push(223,u>>24,u>>16,u>>8,u),l=5}for(o=0;o<u;o++)l+=r(e,t,d=h[o]),l+=r(e,t,n[d]);return l}if("boolean"===i)return e.push(n?195:194),1;if("undefined"===i)return e.push(212,0,0),3;throw new Error("Could not encode")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=[],i=[],o=r(t,i,e),s=new ArrayBuffer(o),a=new DataView(s),c=0,u=0,l=-1;i.length>0&&(l=i[0]._offset);for(var f,h=0,d=0,p=0,y=t.length;p<y;p++)if(a.setUint8(u+p,t[p]),p+1===l){if(h=(f=i[c])._length,d=u+l,f._bin)for(var g=new Uint8Array(f._bin),v=0;v<h;v++)a.setUint8(d+v,g[v]);else f._str?n(a,d,f._str):void 0!==f._float&&a.setFloat64(d,f._float);u+=h,i[++c]&&(l=i[c]._offset)}return s}},91:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FossilDeltaSerializer=void 0;var s=n(449),a=o(n(104)),c=o(n(736)),u=function(){function e(){this.api=new s.StateContainer({})}return e.prototype.getState=function(){return this.api.state},e.prototype.setState=function(e){this.previousState=new Uint8Array(e),this.api.set(c.decode(this.previousState))},e.prototype.patch=function(e){this.previousState=new Uint8Array(a.apply(this.previousState,e)),this.api.set(c.decode(this.previousState))},e.prototype.teardown=function(){this.api.removeAllListeners()},e}();t.FossilDeltaSerializer=u},197:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NoneSerializer=void 0;var n=function(){function e(){}return e.prototype.setState=function(e){},e.prototype.getState=function(){return null},e.prototype.patch=function(e){},e.prototype.teardown=function(){},e.prototype.handshake=function(e){},e}();t.NoneSerializer=n},66:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SchemaSerializer=void 0;var r=n(715),i=function(){function e(){}return e.prototype.setState=function(e){this.state.decode(e)},e.prototype.getState=function(){return this.state},e.prototype.patch=function(e){this.state.decode(e)},e.prototype.teardown=function(){var e,t;null===(t=null===(e=this.state)||void 0===e?void 0:e.$changes)||void 0===t||t.root.clearRefs()},e.prototype.handshake=function(e,t){this.state?(new r.Reflection).decode(e,t):this.state=r.Reflection.decode(e,t)},e}();t.SchemaSerializer=i},944:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSerializer=t.registerSerializer=void 0;var n={};t.registerSerializer=function(e,t){n[e]=t},t.getSerializer=function(e){var t=n[e];if(!t)throw new Error("missing serializer: "+e);return t}},950:(e,t,n)=>{"use strict";function r(e){if("string"!=typeof e||!e)throw new Error("expected a non-empty string, got: "+e)}function i(e){if("number"!=typeof e)throw new Error("expected a number, got: "+e)}n.r(t),n.d(t,{Database:()=>B,Picker:()=>yt});const o="emoji",s="keyvalue",a="favorites",c="tokens",u="count",l="group-order",f="eTag",h="url",d="skinTone",p="readonly",y="readwrite",g="skinUnicodes";function v(e){return function(e,t){const n=new Set,r=[];for(const t of e){const e=t.unicode;n.has(e)||(n.add(e),r.push(t))}return r}(e)}const m={},b={},w={};function _(e,t,n){n.onerror=()=>t(n.error),n.onblocked=()=>t(new Error("IDB blocked")),n.onsuccess=()=>e(n.result)}function $(e,t,n,r){return new Promise(((i,o)=>{const s=e.transaction(t,n),a="string"==typeof t?s.objectStore(t):t.map((e=>s.objectStore(e)));let c;r(a,(e=>{c=e})),s.oncomplete=()=>i(c),s.onerror=()=>o(s.error)}))}function E(e){const t=m[e],n=t&&t.result;if(n){n.close();const t=w[e];if(t)for(const e of t)e()}delete m[e],delete b[e],delete w[e]}const O=new Set([":D","xD",":'D","o:)",":x",":p",";p","xp",":l",":z",":j","8D","xo","8)",":B",":o",":s",":'o","Dx","x(","D:",":c",">0)",":3","</3","<3","\\m/",":E","8#"]);function A(e){return e.split(/[\s_]+/).map((e=>!e.match(/\w/)||O.has(e)?e.toLowerCase():e.replace(/[)(:,]/g,"").replace(/’/g,"'").toLowerCase())).filter(Boolean)}function k(e,t,n,r){e[t](n).onsuccess=e=>r&&r(e.target.result)}function x(e,t,n){k(e,"get",t,n)}function S(e,t,n){k(e,"getAll",t,n)}function C(e,t){const n=function(e,t){let n=e[0];for(let r=1;r<e.length;r++){const i=e[r];t(n)>t(i)&&(n=i)}return n}(e,(e=>e.length)),r=[];for(const i of n)e.some((e=>-1===e.findIndex((e=>t(e)===t(i)))))||r.push(i);return r}async function I(e,t,n,r){try{const i=function(e){return e.map((({annotation:e,emoticon:t,group:n,order:r,shortcodes:i,skins:o,tags:s,emoji:a,version:c})=>{const u=[...new Set([...(i||[]).map(A).flat(),...s.map(A).flat(),...A(e),t].filter(Boolean).map((e=>e.toLowerCase())).filter((e=>e.length>=2)))].sort(),l={annotation:e,group:n,order:r,tags:s,tokens:u,unicode:a,version:c};if(t&&(l.emoticon=t),i&&(l.shortcodes=i),o){l.skinTones=[],l.skinUnicodes=[],l.skinVersions=[];for(const{tone:e,emoji:t,version:n}of o)l.skinTones.push(e),l.skinUnicodes.push(t),l.skinVersions.push(n)}return l}))}(t);await $(e,[o,s],y,(([e,t])=>{let o,s,a,c=0;function u(){3==++c&&function(){if(o!==r||s!==n){for(const t of a)e.delete(t);for(const t of i)e.put(t);t.put(r,f),t.put(n,h)}}()}x(t,f,(e=>{o=e,u()})),x(t,h,(e=>{s=e,u()})),k(e,"getAllKeys",void 0,(e=>{a=e,u()}))}))}finally{}}async function j(e,t){const n=A(t);return $(e,o,p,((e,t)=>{const r=[],i=()=>{const e=C(r,(e=>e.unicode));t(e.sort(((e,t)=>e.order<t.order?-1:1)))};for(let t=0;t<n.length;t++){const o=n[t],s=t===n.length-1?IDBKeyRange.bound(o,o+"￿",!1,!0):IDBKeyRange.only(o);S(e.index(c),s,(e=>{r.push(e),r.length===n.length&&i()}))}}))}function P(e,t,n){return $(e,t,p,((e,t)=>x(e,n,t)))}const T=["name","url"];function R(e){!function(e){const t=e&&Array.isArray(e),n=t&&e.length&&(!e[0]||T.some((t=>!(t in e[0]))));if(!t||n)throw new Error("Custom emojis are in the wrong format")}(e);const t=(e,t)=>e.name.toLowerCase()<t.name.toLowerCase()?-1:1,n=e.sort(t),r=function(e,t){const n=new Map;for(const t of e){const e=[...new Set((t.shortcodes||[]).map((e=>A(e))).flat())];for(const r of e){let e=n;for(let t=0;t<r.length;t++){const n=r.charAt(t);let i=e.get(n);i||(i=new Map,e.set(n,i)),e=i}let i=e.get("");i||(i=[],e.set("",i)),i.push(t)}}return(e,t)=>{let r=n;for(let t=0;t<e.length;t++){const n=e.charAt(t),i=r.get(n);if(!i)return[];r=i}if(t)return r.get("")||[];const i=[],o=[r];for(;o.length;){const e=[...o.shift().entries()].sort(((e,t)=>e[0]<t[0]?-1:1));for(const[t,n]of e)""===t?i.push(...n):o.push(n)}return i}}(e),i=e=>r(e,!0),o=e=>r(e,!1),s=new Map,a=new Map;for(const t of e){a.set(t.name.toLowerCase(),t);for(const e of t.shortcodes||[])s.set(e.toLowerCase(),t)}return{all:n,search:e=>{const n=A(e);return C(n.map(((e,t)=>(t<n.length-1?i:o)(e))),(e=>e.name)).sort(t)},byShortcode:e=>s.get(e.toLowerCase()),byName:e=>a.get(e.toLowerCase())}}function M(e){if(!e)return e;if(delete e.tokens,e.skinTones){const t=e.skinTones.length;e.skins=Array(t);for(let n=0;n<t;n++)e.skins[n]={tone:e.skinTones[n],unicode:e.skinUnicodes[n],version:e.skinVersions[n]};delete e.skinTones,delete e.skinUnicodes,delete e.skinVersions}return e}function N(e){e||function(){console.warn(...arguments)}("emoji-picker-element is more efficient if the dataSource server exposes an ETag header.")}const D=["annotation","emoji","group","order","tags","version"];function L(e,t){if(2!==Math.floor(e.status/100))throw new Error("Failed to fetch: "+t+":  "+e.status)}async function z(e){const t=await fetch(e);L(t,e);const n=t.headers.get("etag");N(n);const r=await t.json();return function(e){if(!e||!Array.isArray(e)||!e[0]||"object"!=typeof e[0]||D.some((t=>!(t in e[0]))))throw new Error("Emoji data is in the wrong format")}(r),[n,r]}async function U(e){const t=function(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),i=-1;++i<t;)r[i]=e.charCodeAt(i);return n}(JSON.stringify(e)),n=function(e){for(var t="",n=new Uint8Array(e),r=n.byteLength,i=-1;++i<r;)t+=String.fromCharCode(n[i]);return t}(await crypto.subtle.digest("SHA-1",t));return btoa(n)}const B=class{constructor({dataSource:e="https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json",locale:t="en",customEmoji:n=[]}={}){this.dataSource=e,this.locale=t,this._dbName=`emoji-picker-element-${this.locale}`,this._db=void 0,this._lazyUpdate=void 0,this._custom=R(n),this._clear=this._clear.bind(this),this._ready=this._init()}async _init(){const e=this._db=await(t=this._dbName,b[t]||(b[t]=async function(e){const t=await new Promise(((t,n)=>{const r=indexedDB.open(e,1);m[e]=r,r.onupgradeneeded=e=>{e.oldVersion<1&&function(e){function t(t,n,r){const i=n?e.createObjectStore(t,{keyPath:n}):e.createObjectStore(t);if(r)for(const[e,[t,n]]of Object.entries(r))i.createIndex(e,t,{multiEntry:n});return i}t(s),t(o,"unicode",{[c]:["tokens",!0],[l]:[["group","order"]],[g]:["skinUnicodes",!0]}),t(a,void 0,{[u]:[""]})}(r.result)},_(t,n,r)}));return t.onclose=()=>E(e),t}(t)),b[t]);var t;!function(e,t){let n=w[e];n||(n=w[e]=[]),n.push(t)}(this._dbName,this._clear);const n=this.dataSource;await async function(e){return!await P(e,s,h)}(e)?await async function(e,t){let[n,r]=await z(t);n||(n=await U(r)),await I(e,r,t,n)}(e,n):this._lazyUpdate=async function(e,t){let n,r=await async function(e){const t=await fetch(e,{method:"HEAD"});L(t,e);const n=t.headers.get("etag");return N(n),n}(t);if(!r){const e=await z(t);r=e[0],n=e[1],r||(r=await U(n))}await async function(e,t,n){const[r,i]=await Promise.all([f,h].map((t=>P(e,s,t))));return r===n&&i===t}(e,t,r)||(n||(n=(await z(t))[1]),await I(e,n,t,r))}(e,n)}async ready(){return this._ready||(this._ready=this._init()),this._ready}async getEmojiByGroup(e){return i(e),await this.ready(),v(await async function(e,t){return $(e,o,p,((e,n)=>{const r=IDBKeyRange.bound([t,0],[t+1,0],!1,!0);S(e.index(l),r,n)}))}(this._db,e)).map(M)}async getEmojiBySearchQuery(e){return r(e),await this.ready(),[...this._custom.search(e),...v(await j(this._db,e)).map(M)]}async getEmojiByShortcode(e){r(e),await this.ready();return this._custom.byShortcode(e)||M(await async function(e,t){return(await j(e,t)).filter((e=>e.shortcodes.map((e=>e.toLowerCase())).includes(t.toLowerCase())))[0]||null}(this._db,e))}async getEmojiByUnicodeOrName(e){r(e),await this.ready();return this._custom.byName(e)||M(await async function(e,t){return $(e,o,p,((e,n)=>x(e,t,(r=>{if(r)return n(r);x(e.index(g),t,(e=>n(e||null)))}))))}(this._db,e))}async getPreferredSkinTone(){return await this.ready(),await P(this._db,s,d)||0}async setPreferredSkinTone(e){return i(e),await this.ready(),t=this._db,d,n=e,$(t,s,y,(e=>e.put(n,"skinTone")));var t,n}async incrementFavoriteEmojiCount(e){return r(e),await this.ready(),t=this._db,n=e,$(t,a,y,(e=>{x(e,n,(t=>e.put((t||0)+1,n)))}));var t,n}async getTopFavoriteEmoji(e){return i(e),await this.ready(),(await function(e,t,n){return 0===n?[]:$(e,[a,o],p,(([e,r],i)=>{const o=[];e.index(u).openCursor(void 0,"prev").onsuccess=e=>{const s=e.target.result;if(!s)return i(o);function a(e){if(o.push(e),o.length===n)return i(o);s.continue()}const c=s.primaryKey,u=t.byName(c);if(u)return a(u);x(r,c,(e=>{if(e)return a(e);s.continue()}))}}))}(this._db,this._custom,e)).map(M)}set customEmoji(e){this._custom=R(e)}get customEmoji(){return this._custom.all}async _shutdown(){await this.ready();try{await this._lazyUpdate}catch(e){}return!!this._db}_clear(){this._dbName,this._db=this._ready=this._lazyUpdate=void 0}async close(){await this._shutdown()&&await E(this._dbName)}async delete(){var e;await this._shutdown()&&await(e=this._dbName,new Promise(((t,n)=>{E(e),_(t,n,indexedDB.deleteDatabase(e))})))}};function F(){}function H(e){return e()}function V(){return Object.create(null)}function q(e){e.forEach(H)}function J(e){return"function"==typeof e}function W(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function K(e){return e&&J(e.destroy)?e.destroy:F}function G(e,t){e.appendChild(t)}function Y(e,t,n){e.insertBefore(t,n||null)}function X(e){e.parentNode.removeChild(e)}function Q(e){return document.createElement(e)}function Z(e){return document.createTextNode(e)}function ee(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function te(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function ne(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function re(e,t){e.value=null==t?"":t}function ie(e,t,n,r){e.style.setProperty(t,n,r?"important":"")}let oe;function se(e){oe=e}function ae(){if(!oe)throw new Error("Function called outside component initialization");return oe}const ce=[],ue=[],le=[],fe=[],he=Promise.resolve();let de=!1;function pe(){de||(de=!0,he.then(be))}function ye(){return pe(),he}function ge(e){le.push(e)}let ve=!1;const me=new Set;function be(){if(!ve){ve=!0;do{for(let e=0;e<ce.length;e+=1){const t=ce[e];se(t),we(t.$$)}for(se(null),ce.length=0;ue.length;)ue.pop()();for(let e=0;e<le.length;e+=1){const t=le[e];me.has(t)||(me.add(t),t())}le.length=0}while(ce.length);for(;fe.length;)fe.pop()();de=!1,ve=!1,me.clear()}}function we(e){if(null!==e.fragment){e.update(),q(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(ge)}}const _e=new Set;function $e(e,t){e&&e.i&&(_e.delete(e),e.i(t))}const Ee="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;function Oe(e,t){e.d(1),t.delete(e.key)}function Ae(e,t,n,r,i,o,s,a,c,u,l,f){let h=e.length,d=o.length,p=h;const y={};for(;p--;)y[e[p].key]=p;const g=[],v=new Map,m=new Map;for(p=d;p--;){const e=f(i,o,p),a=n(e);let c=s.get(a);c?r&&c.p(e,t):(c=u(a,e),c.c()),v.set(a,g[p]=c),a in y&&m.set(a,Math.abs(p-y[a]))}const b=new Set,w=new Set;function _(e){$e(e,1),e.m(a,l),s.set(e.key,e),l=e.first,d--}for(;h&&d;){const t=g[d-1],n=e[h-1],r=t.key,i=n.key;t===n?(l=t.first,h--,d--):v.has(i)?!s.has(r)||b.has(r)?_(t):w.has(i)?h--:m.get(r)>m.get(i)?(w.add(r),_(t)):(b.add(i),h--):(c(n,s),h--)}for(;h--;){const t=e[h];v.has(t.key)||c(t,s)}for(;d;)_(g[d-1]);return g}let ke;"function"==typeof HTMLElement&&(ke=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,n){this[e]=n}$destroy(){!function(e,t){const n=e.$$;null!==n.fragment&&(q(n.on_destroy),n.fragment&&n.fragment.d(1),n.on_destroy=n.fragment=null,n.ctx=[])}(this),this.$destroy=F}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){var t;this.$$set&&(t=e,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});var xe={categoriesLabel:"Categories",emojiUnsupportedMessage:"Your browser does not support color emoji.",favoritesLabel:"Favorites",loadingMessage:"Loading…",networkErrorMessage:"Could not load emoji. Try refreshing.",regionLabel:"Emoji picker",searchDescription:"When search results are available, press up or down to select and enter to choose.",searchLabel:"Search",searchResultsLabel:"Search results",skinToneDescription:"When expanded, press up or down to select and enter to choose.",skinToneLabel:"Choose a skin tone (currently {skinTone})",skinTonesLabel:"Skin tones",skinTones:["Default","Light","Medium-Light","Medium","Medium-Dark","Dark"],categories:{custom:"Custom","smileys-emotion":"Smileys and emoticons","people-body":"People and body","animals-nature":"Animals and nature","food-drink":"Food and drink","travel-places":"Travel and places",activities:"Activities",objects:"Objects",symbols:"Symbols",flags:"Flags"}};const Se=[[-1,"✨","custom"],[0,"😀","smileys-emotion"],[1,"👋","people-body"],[3,"🐱","animals-nature"],[4,"🍎","food-drink"],[5,"🏠️","travel-places"],[6,"⚽","activities"],[7,"📝","objects"],[8,"⛔️","symbols"],[9,"🏁","flags"]].map((([e,t,n])=>({id:e,emoji:t,name:n}))),Ce=Se.slice(1),Ie=Se[0],je="function"==typeof requestIdleCallback?requestIdleCallback:setTimeout;function Pe(e){return e.unicode.includes("‍")}const Te={"😃":.6,"😐️":.7,"😀":1,"👁️‍🗨️":2,"🤣":3,"👱‍♀️":4,"🤩":5,"🥰":11,"🥻":12,"🧑‍🦰":12.1,"🥲":13},Re="🖐️",Me=["😊","😒","♥️","👍️","😍","😂","😭","☺️","😔","😩","😏","💕","🙌","😘"],Ne='"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Twemoji Mozilla","Noto Color Emoji","EmojiOne Color","Android Emoji",sans-serif',De=(e,t)=>{try{const n=document.createElement("canvas");n.width=n.height=1;const r=n.getContext("2d");return r.textBaseline="top",r.font=`100px ${Ne}`,r.fillStyle=t,r.scale(.01,.01),r.fillText(e,0,0),r.getImageData(0,0,1,1).data}catch(e){}};function Le(e){const t=De(e,"#000"),n=De(e,"#fff");return t&&n&&((e,t)=>{const n=[...e].join(",");return n===[...t].join(",")&&!n.startsWith("0,0,0,")})(t,n)}const ze=new Promise((e=>je((()=>e(function(){let e;for(const[t,n]of Object.entries(Te)){if(!Le(t))break;e=n}return e}()))))),Ue=new Map;function Be(e){e.preventDefault(),e.stopPropagation()}function Fe(e,t,n){return(t+=e?-1:1)<0?t=n.length-1:t>=n.length&&(t=0),t}function He(e,t){const n=new Set,r=[];for(const i of e){const e=t(i);n.has(e)||(n.add(e),r.push(i))}return r}const Ve=requestAnimationFrame,qe="function"==typeof ResizeObserver;function Je(e,t){let n;return qe?(n=new ResizeObserver((e=>t(e[0].contentRect.width))),n.observe(e)):Ve((()=>t(e.getBoundingClientRect().width))),{destroy(){n&&n.disconnect()}}}function We(e){{const t=document.createRange();return t.selectNode(e.firstChild),t.getBoundingClientRect().width}}let Ke;const{Map:Ge}=Ee;function Ye(e,t,n){const r=e.slice();return r[65]=t[n],r[67]=n,r}function Xe(e,t,n){const r=e.slice();return r[65]=t[n],r[67]=n,r}function Qe(e,t,n){const r=e.slice();return r[68]=t[n],r[67]=n,r}function Ze(e,t,n){const r=e.slice();return r[71]=t[n],r}function et(e,t,n){const r=e.slice();return r[74]=t[n],r[67]=n,r}function tt(e,t){let n,r,i,o,s,a,c,u=t[74]+"";return{key:e,first:null,c(){n=Q("div"),r=Z(u),te(n,"id",i="skintone-"+t[67]),te(n,"class",o="emoji skintone-option cursor-pointer hide-focus "+(t[67]===t[15]?"active":"")),te(n,"aria-selected",s=t[67]===t[15]),te(n,"role","option"),te(n,"title",a=t[0].skinTones[t[67]]),te(n,"tabindex","-1"),te(n,"aria-label",c=t[0].skinTones[t[67]]),this.first=n},m(e,t){Y(e,n,t),G(n,r)},p(e,t){524288&t[0]&&u!==(u=e[74]+"")&&ne(r,u),524288&t[0]&&i!==(i="skintone-"+e[67])&&te(n,"id",i),557056&t[0]&&o!==(o="emoji skintone-option cursor-pointer hide-focus "+(e[67]===e[15]?"active":""))&&te(n,"class",o),557056&t[0]&&s!==(s=e[67]===e[15])&&te(n,"aria-selected",s),524289&t[0]&&a!==(a=e[0].skinTones[e[67]])&&te(n,"title",a),524289&t[0]&&c!==(c=e[0].skinTones[e[67]])&&te(n,"aria-label",c)},d(e){e&&X(n)}}}function nt(e,t){let n,r,i,o,s,a,c,u,l,f=t[71].emoji+"";function h(...e){return t[46](t[71],...e)}return{key:e,first:null,c(){n=Q("button"),r=Q("div"),i=Z(f),te(r,"class","emoji"),te(n,"role","tab"),te(n,"class","nav-button"),te(n,"aria-controls",o="tab-"+t[71].id),te(n,"aria-label",s=t[0].categories[t[71].name]),te(n,"aria-selected",a=!t[7]&&t[23].id===t[71].id),te(n,"title",c=t[0].categories[t[71].name]),this.first=n},m(e,t){Y(e,n,t),G(n,r),G(r,i),u||(l=ee(n,"click",h),u=!0)},p(e,r){t=e,4194304&r[0]&&f!==(f=t[71].emoji+"")&&ne(i,f),4194304&r[0]&&o!==(o="tab-"+t[71].id)&&te(n,"aria-controls",o),4194305&r[0]&&s!==(s=t[0].categories[t[71].name])&&te(n,"aria-label",s),12583040&r[0]&&a!==(a=!t[7]&&t[23].id===t[71].id)&&te(n,"aria-selected",a),4194305&r[0]&&c!==(c=t[0].categories[t[71].name])&&te(n,"title",c)},d(e){e&&X(n),u=!1,l()}}}function rt(e){let t,n;return{c(){t=Q("img"),te(t,"class","custom-emoji"),t.src!==(n=e[65].url)&&te(t,"src",n),te(t,"alt",""),te(t,"loading","lazy")},m(e,n){Y(e,t,n)},p(e,r){4&r[0]&&t.src!==(n=e[65].url)&&te(t,"src",n)},d(e){e&&X(t)}}}function it(e){let t,n=ft(e[65],e[14])+"";return{c(){t=Z(n)},m(e,n){Y(e,t,n)},p(e,r){16388&r[0]&&n!==(n=ft(e[65],e[14])+"")&&ne(t,n)},d(e){e&&X(t)}}}function ot(e,t){let n,r,i,o,s,a,c;function u(e,t){return e[65].unicode?it:rt}let l=u(t),f=l(t);return{key:e,first:null,c(){n=Q("button"),f.c(),te(n,"role",r=t[7]?"option":"menuitem"),te(n,"aria-selected",i=t[7]?t[67]==t[8]:""),te(n,"aria-label",o=t[26](t[65],t[14])),te(n,"title",s=t[65].title),te(n,"class",a="emoji "+(t[7]&&t[67]===t[8]?"active":"")),te(n,"id",c="emo-"+t[65].id),this.first=n},m(e,t){Y(e,n,t),f.m(n,null)},p(e,t){l===(l=u(e))&&f?f.p(e,t):(f.d(1),f=l(e),f&&(f.c(),f.m(n,null))),128&t[0]&&r!==(r=e[7]?"option":"menuitem")&&te(n,"role",r),388&t[0]&&i!==(i=e[7]?e[67]==e[8]:"")&&te(n,"aria-selected",i),16388&t[0]&&o!==(o=e[26](e[65],e[14]))&&te(n,"aria-label",o),4&t[0]&&s!==(s=e[65].title)&&te(n,"title",s),388&t[0]&&a!==(a="emoji "+(e[7]&&e[67]===e[8]?"active":""))&&te(n,"class",a),4&t[0]&&c!==(c="emo-"+e[65].id)&&te(n,"id",c)},d(e){e&&X(n),f.d()}}}function st(e,t){let n,r,i,o,s,a,c,u,l,f,h,d=(t[7]?t[0].searchResultsLabel:t[68].category?t[68].category:t[2].length>1?t[0].categories.custom:t[0].categories[t[23].name])+"",p=[],y=new Ge,g=t[68].emojis;const v=e=>e[65].id;for(let e=0;e<g.length;e+=1){let n=Xe(t,g,e),r=v(n);y.set(r,p[e]=ot(r,n))}return{key:e,first:null,c(){n=Q("div"),r=Z(d),s=Q("div");for(let e=0;e<p.length;e+=1)p[e].c();te(n,"id",i="menu-label-"+t[67]),te(n,"class",o="category "+(t[2].length>1?"":"gone")),te(n,"aria-hidden","true"),te(s,"class","emoji-menu"),te(s,"role",a=t[7]?"listbox":"menu"),te(s,"aria-labelledby",c="menu-label-"+t[67]),te(s,"id",u=t[7]?"search-results":""),this.first=n},m(e,i){Y(e,n,i),G(n,r),Y(e,s,i);for(let e=0;e<p.length;e+=1)p[e].m(s,null);f||(h=K(l=t[27].call(null,s)),f=!0)},p(e,t){if(8388741&t[0]&&d!==(d=(e[7]?e[0].searchResultsLabel:e[68].category?e[68].category:e[2].length>1?e[0].categories.custom:e[0].categories[e[23].name])+"")&&ne(r,d),4&t[0]&&i!==(i="menu-label-"+e[67])&&te(n,"id",i),4&t[0]&&o!==(o="category "+(e[2].length>1?"":"gone"))&&te(n,"class",o),67125636&t[0]){const n=e[68].emojis;p=Ae(p,t,v,1,e,n,y,s,Oe,ot,null,Xe)}128&t[0]&&a!==(a=e[7]?"listbox":"menu")&&te(s,"role",a),4&t[0]&&c!==(c="menu-label-"+e[67])&&te(s,"aria-labelledby",c),128&t[0]&&u!==(u=e[7]?"search-results":"")&&te(s,"id",u)},d(e){e&&X(n),e&&X(s);for(let e=0;e<p.length;e+=1)p[e].d();f=!1,h()}}}function at(e){let t,n;return{c(){t=Q("img"),te(t,"class","custom-emoji"),t.src!==(n=e[65].url)&&te(t,"src",n),te(t,"alt",""),te(t,"loading","lazy")},m(e,n){Y(e,t,n)},p(e,r){1048576&r[0]&&t.src!==(n=e[65].url)&&te(t,"src",n)},d(e){e&&X(t)}}}function ct(e){let t,n=ft(e[65],e[14])+"";return{c(){t=Z(n)},m(e,n){Y(e,t,n)},p(e,r){1064960&r[0]&&n!==(n=ft(e[65],e[14])+"")&&ne(t,n)},d(e){e&&X(t)}}}function ut(e,t){let n,r,i,o;function s(e,t){return e[65].unicode?ct:at}let a=s(t),c=a(t);return{key:e,first:null,c(){n=Q("button"),c.c(),te(n,"role","menuitem"),te(n,"aria-label",r=t[26](t[65],t[14])),te(n,"title",i=t[65].title),te(n,"class","emoji"),te(n,"id",o="fav-"+t[65].id),this.first=n},m(e,t){Y(e,n,t),c.m(n,null)},p(e,t){a===(a=s(e))&&c?c.p(e,t):(c.d(1),c=a(e),c&&(c.c(),c.m(n,null))),1064960&t[0]&&r!==(r=e[26](e[65],e[14]))&&te(n,"aria-label",r),1048576&t[0]&&i!==(i=e[65].title)&&te(n,"title",i),1048576&t[0]&&o!==(o="fav-"+e[65].id)&&te(n,"id",o)},d(e){e&&X(n),c.d()}}}function lt(e){let t,n,r,i,o,s,a,c,u,l,f,h,d,p,y,g,v,m,b,w,_,$,E,O,A,k,x,S,C,I,j,P,T,R,M,N,D,L,z,U,B,H,V,J,W,oe,se=e[0].searchLabel+"",ae=e[0].searchDescription+"",ce=e[0].skinToneDescription+"",ue=[],le=new Ge,fe=[],he=new Ge,de=[],pe=new Ge,ye=[],ge=new Ge,ve=e[19];const me=e=>e[74];for(let t=0;t<ve.length;t+=1){let n=et(e,ve,t),r=me(n);le.set(r,ue[t]=tt(r,n))}let be=e[22];const we=e=>e[71].id;for(let t=0;t<be.length;t+=1){let n=Ze(e,be,t),r=we(n);he.set(r,fe[t]=nt(r,n))}let _e=e[2];const $e=e=>e[68].category;for(let t=0;t<_e.length;t+=1){let n=Qe(e,_e,t),r=$e(n);pe.set(r,de[t]=st(r,n))}let Ee=e[20];const ke=e=>e[65].id;for(let t=0;t<Ee.length;t+=1){let n=Ye(e,Ee,t),r=ke(n);ge.set(r,ye[t]=ut(r,n))}return{c(){t=Q("section"),n=Q("div"),r=Q("div"),i=Q("div"),o=Q("input"),u=Q("label"),l=Z(se),f=Q("span"),h=Z(ae),d=Q("div"),p=Q("button"),y=Z(e[16]),m=Q("span"),b=Z(ce),w=Q("div");for(let e=0;e<ue.length;e+=1)ue[e].c();k=Q("div");for(let e=0;e<fe.length;e+=1)fe[e].c();S=Q("div"),C=Q("div"),j=Q("div"),P=Z(e[9]),R=Q("div");for(let e=0;e<de.length;e+=1)de[e].c();z=Q("div");for(let e=0;e<ye.length;e+=1)ye[e].c();H=Q("div"),V=Q("button"),V.textContent="😀",this.c=F,te(n,"class","pad-top"),te(o,"id","search"),te(o,"class","search"),te(o,"type","search"),te(o,"role","combobox"),te(o,"enterkeyhint","search"),te(o,"placeholder",s=e[0].searchLabel),te(o,"autocapitalize","none"),te(o,"autocomplete","off"),te(o,"spellcheck","true"),te(o,"aria-expanded",a=!(!e[7]||!e[1].length)),te(o,"aria-controls","search-results"),te(o,"aria-owns","search-results"),te(o,"aria-describedby","search-description"),te(o,"aria-autocomplete","list"),te(o,"aria-activedescendant",c=e[25]?`emo-${e[25]}`:""),te(u,"class","sr-only"),te(u,"for","search"),te(f,"id","search-description"),te(f,"class","sr-only"),te(i,"class","search-wrapper"),te(p,"id","skintone-button"),te(p,"class",g="emoji "+(e[11]?"hide-focus":"")),te(p,"aria-label",e[18]),te(p,"title",e[18]),te(p,"aria-describedby","skintone-description"),te(p,"aria-haspopup","listbox"),te(p,"aria-expanded",e[11]),te(p,"aria-controls","skintone-list"),te(d,"class",v="skintone-button-wrapper "+(e[12]?"expanded":"")),te(m,"id","skintone-description"),te(m,"class","sr-only"),te(w,"id","skintone-list"),te(w,"class",_="skintone-list "+(e[11]?"":"hidden no-animate")),te(w,"style",$=e[11]?"transform: translateY(0);":"transform: translateY(calc(-1 * var(--num-skintones) * var(--total-emoji-size)))"),te(w,"role","listbox"),te(w,"aria-label",E=e[0].skinTonesLabel),te(w,"aria-activedescendant",O="skintone-"+e[15]),te(w,"aria-hidden",A=!e[11]),te(r,"class","search-row"),te(k,"class","nav"),te(k,"role","tablist"),ie(k,"grid-template-columns","repeat("+e[22].length+", 1fr)"),te(k,"aria-label",x=e[0].categoriesLabel),te(C,"class","indicator"),te(C,"style",e[10]),te(S,"class","indicator-wrapper"),te(j,"class",T="message "+(e[9]?"":"gone")),te(j,"role","alert"),te(j,"aria-live","polite"),te(R,"class",M="tabpanel "+(!e[24]||e[9]?"gone":"")),te(R,"role",N=e[7]?"region":"tabpanel"),te(R,"aria-label",D=e[7]?e[0].searchResultsLabel:e[0].categories[e[23].name]),te(R,"id",L=e[7]?"":`tab-${e[23].id}`),te(R,"tabindex","0"),te(z,"class",U="favorites emoji-menu "+(e[9]?"gone":"")),te(z,"role","menu"),te(z,"aria-label",B=e[0].favoritesLabel),ie(z,"padding-right",e[21]+"px"),te(V,"tabindex","-1"),te(V,"class","emoji baseline-emoji"),te(H,"aria-hidden","true"),te(H,"class","hidden abs-pos"),te(t,"class","picker"),te(t,"aria-label",J=e[0].regionLabel),te(t,"style",e[17])},m(s,a){Y(s,t,a),G(t,n),G(t,r),G(r,i),G(i,o),re(o,e[3]),G(i,u),G(u,l),G(i,f),G(f,h),G(r,d),G(d,p),G(p,y),G(r,m),G(m,b),G(r,w);for(let e=0;e<ue.length;e+=1)ue[e].m(w,null);e[45](w),G(t,k);for(let e=0;e<fe.length;e+=1)fe[e].m(k,null);G(t,S),G(S,C),G(t,j),G(j,P),G(t,R);for(let e=0;e<de.length;e+=1)de[e].m(R,null);e[47](R),G(t,z);for(let e=0;e<ye.length;e+=1)ye[e].m(z,null);G(t,H),G(H,V),e[48](V),e[49](t),W||(oe=[ee(o,"input",e[44]),ee(o,"keydown",e[29]),ee(p,"click",e[34]),ee(w,"focusout",e[37]),ee(w,"click",e[33]),ee(w,"keydown",e[35]),ee(w,"keyup",e[36]),ee(k,"keydown",e[31]),K(I=e[28].call(null,C)),ee(R,"click",e[32]),ee(z,"click",e[32])],W=!0)},p(e,n){if(1&n[0]&&s!==(s=e[0].searchLabel)&&te(o,"placeholder",s),130&n[0]&&a!==(a=!(!e[7]||!e[1].length))&&te(o,"aria-expanded",a),33554432&n[0]&&c!==(c=e[25]?`emo-${e[25]}`:"")&&te(o,"aria-activedescendant",c),8&n[0]&&re(o,e[3]),1&n[0]&&se!==(se=e[0].searchLabel+"")&&ne(l,se),1&n[0]&&ae!==(ae=e[0].searchDescription+"")&&ne(h,ae),65536&n[0]&&ne(y,e[16]),2048&n[0]&&g!==(g="emoji "+(e[11]?"hide-focus":""))&&te(p,"class",g),262144&n[0]&&te(p,"aria-label",e[18]),262144&n[0]&&te(p,"title",e[18]),2048&n[0]&&te(p,"aria-expanded",e[11]),4096&n[0]&&v!==(v="skintone-button-wrapper "+(e[12]?"expanded":""))&&te(d,"class",v),1&n[0]&&ce!==(ce=e[0].skinToneDescription+"")&&ne(b,ce),557057&n[0]){const t=e[19];ue=Ae(ue,n,me,1,e,t,le,w,Oe,tt,null,et)}if(2048&n[0]&&_!==(_="skintone-list "+(e[11]?"":"hidden no-animate"))&&te(w,"class",_),2048&n[0]&&$!==($=e[11]?"transform: translateY(0);":"transform: translateY(calc(-1 * var(--num-skintones) * var(--total-emoji-size)))")&&te(w,"style",$),1&n[0]&&E!==(E=e[0].skinTonesLabel)&&te(w,"aria-label",E),32768&n[0]&&O!==(O="skintone-"+e[15])&&te(w,"aria-activedescendant",O),2048&n[0]&&A!==(A=!e[11])&&te(w,"aria-hidden",A),1086324865&n[0]){const t=e[22];fe=Ae(fe,n,we,1,e,t,he,k,Oe,nt,null,Ze)}if(4194304&n[0]&&ie(k,"grid-template-columns","repeat("+e[22].length+", 1fr)"),1&n[0]&&x!==(x=e[0].categoriesLabel)&&te(k,"aria-label",x),1024&n[0]&&te(C,"style",e[10]),512&n[0]&&ne(P,e[9]),512&n[0]&&T!==(T="message "+(e[9]?"":"gone"))&&te(j,"class",T),75514245&n[0]){const t=e[2];de=Ae(de,n,$e,1,e,t,pe,R,Oe,st,null,Qe)}if(16777728&n[0]&&M!==(M="tabpanel "+(!e[24]||e[9]?"gone":""))&&te(R,"class",M),128&n[0]&&N!==(N=e[7]?"region":"tabpanel")&&te(R,"role",N),8388737&n[0]&&D!==(D=e[7]?e[0].searchResultsLabel:e[0].categories[e[23].name])&&te(R,"aria-label",D),8388736&n[0]&&L!==(L=e[7]?"":`tab-${e[23].id}`)&&te(R,"id",L),68173824&n[0]){const t=e[20];ye=Ae(ye,n,ke,1,e,t,ge,z,Oe,ut,null,Ye)}512&n[0]&&U!==(U="favorites emoji-menu "+(e[9]?"gone":""))&&te(z,"class",U),1&n[0]&&B!==(B=e[0].favoritesLabel)&&te(z,"aria-label",B),2097152&n[0]&&ie(z,"padding-right",e[21]+"px"),1&n[0]&&J!==(J=e[0].regionLabel)&&te(t,"aria-label",J),131072&n[0]&&te(t,"style",e[17])},i:F,o:F,d(n){n&&X(t);for(let e=0;e<ue.length;e+=1)ue[e].d();e[45](null);for(let e=0;e<fe.length;e+=1)fe[e].d();for(let e=0;e<de.length;e+=1)de[e].d();e[47](null);for(let e=0;e<ye.length;e+=1)ye[e].d();e[48](null),e[49](null),W=!1,q(oe)}}}function ft(e,t){return t&&e.skins&&e.skins[t]||e.unicode}function ht(e,t,n){let r,i,o,s,a,c,u,l,f,h,{locale:d=null}=t,{dataSource:p=null}=t,{skinToneEmoji:y=Re}=t,{i18n:g=xe}=t,{database:v=null}=t,{customEmoji:m=null}=t,{customCategorySorting:b=((e,t)=>e<t?-1:e>t?1:0)}=t,w=[],_=[],$="",E="",O=!1,A=-1,k=0,x="",S=!1,C=!1,I=0,j=0,P="",T=[],R=[],M=8,N=0,D=0,L=Ce,z=!1;function U(e){r.getRootNode().getElementById(e).focus()}function F(e,t){r.dispatchEvent(new CustomEvent(e,{detail:t,bubbles:!0,composed:!0}))}var H;function V(e){return!e.unicode||!Pe(e)||Ue.get(e.unicode)}async function q(e){const t=await ze;return e.filter((({version:e})=>!e||e<=t))}async function J(e){return function(e,t){const n=e=>{const n={};for(const r of e)"number"==typeof r.tone&&r.version<=t&&(n[r.tone]=r.unicode);return n};return e.map((({unicode:e,skins:t,shortcodes:r,url:i,name:o,category:s})=>({unicode:e,name:o,shortcodes:r,url:i,category:s,id:e||o,skins:t&&n(t),title:(r||[]).join(", ")})))}(e,await ze)}function W(e){n(3,$=""),n(51,E=""),n(8,A=-1),n(55,D=L.findIndex((t=>t.id===e.id)))}async function K(e){const t=await v.getEmojiByUnicodeOrName(e),r=[...w,...R].find((t=>t.id===e)),i=r.unicode&&ft(r,I);await v.incrementFavoriteEmojiCount(e),n(53,l=l),F("emoji-click",{emoji:t,skinTone:I,...i&&{unicode:i},...r.name&&{name:r.name}})}async function G(e){const{target:t}=e;if(!t.classList.contains("skintone-option"))return;Be(e);const r=parseInt(t.id.slice(9),10);n(14,I=r),n(11,S=!1),U("skintone-button"),F("skin-tone-change",{skinTone:r}),v.setPreferredSkinTone(r)}return ze.then((e=>{e||n(9,s=g.emojiUnsupportedMessage)})),H=async()=>{await ye(),n(38,d=d||"en"),n(39,p=p||"https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json")},ae().$$.on_mount.push(H),ae().$$.on_destroy.push((async()=>{v&&await v.close()})),e.$$set=e=>{"locale"in e&&n(38,d=e.locale),"dataSource"in e&&n(39,p=e.dataSource),"skinToneEmoji"in e&&n(41,y=e.skinToneEmoji),"i18n"in e&&n(0,g=e.i18n),"database"in e&&n(40,v=e.database),"customEmoji"in e&&n(42,m=e.customEmoji),"customCategorySorting"in e&&n(43,b=e.customCategorySorting)},e.$$.update=()=>{if(896&e.$$.dirty[1]&&d&&p&&(!v||v.locale!==d&&v.dataSource!==p)&&n(40,v=new B({dataSource:p,locale:d})),2560&e.$$.dirty[1]&&m&&v&&n(40,v.customEmoji=m,v),513&e.$$.dirty[0]|512&e.$$.dirty[1]&&v&&async function(){const e=setTimeout((()=>{n(9,s=g.loadingMessage)}),1e3);try{await v.ready(),n(24,z=!0)}catch(e){console.error(e),n(9,s=g.networkErrorMessage)}finally{clearTimeout(e),s===g.loadingMessage&&n(9,s="")}}(),4194304&e.$$.dirty[0]|2048&e.$$.dirty[1]&&(m&&m.length?n(22,L=[Ie,...Ce]):L!==Ce&&n(22,L=Ce)),8&e.$$.dirty[0]&&je((()=>{n(51,E=($||"").trim()),n(8,A=-1)})),4194304&e.$$.dirty[0]|16777216&e.$$.dirty[1]&&n(23,f=L[D]),8388608&e.$$.dirty[0]|1049088&e.$$.dirty[1]&&async function(){v?E.length>=2?(n(1,w=await async function(e){return J(await q(await v.getEmojiBySearchQuery(e)))}(E)),n(7,O=!0)):f&&(n(1,w=await async function(e){if(void 0===e)return[];const t=-1===e?m:await v.getEmojiByGroup(e);return J(await q(t))}(f.id)),n(7,O=!1)):(n(1,w=[]),n(7,O=!1))}(),4194432&e.$$.dirty[0]&&n(17,u=`\n  --font-family: ${Ne};\n  --num-groups: ${L.length}; \n  --indicator-opacity: ${O?0:1}; \n  --num-skintones: 6;`),512&e.$$.dirty[1]&&async function(){v&&n(14,I=await v.getPreferredSkinTone())}(),1024&e.$$.dirty[1]&&n(19,T=Array(6).fill().map(((e,t)=>function(e,t){if(0===t)return e;const n=e.indexOf("‍");return-1!==n?e.substring(0,n)+String.fromCodePoint(127995+t-1)+e.substring(n):(e.endsWith("️")&&(e=e.substring(0,e.length-1)),e+"\ud83c"+String.fromCodePoint(57339+t-1))}(y,t)))),540672&e.$$.dirty[0]&&n(16,c=T[I]),16385&e.$$.dirty[0]&&n(18,P=g.skinToneLabel.replace("{skinTone}",g.skinTones[I])),512&e.$$.dirty[1]&&v&&async function(){n(53,l=(await Promise.all(Me.map((e=>v.getEmojiByUnicodeOrName(e))))).filter(Boolean))}(),12583424&e.$$.dirty[1]&&v&&l&&async function(){const e=await v.getTopFavoriteEmoji(M),t=await J(He([...e,...l],(e=>e.unicode||e.name)).slice(0,M));n(20,R=t)}(),18874368&e.$$.dirty[1]&&n(10,x=qe?`transform: translateX(${D*k}px);`:`transform: translateX(${100*D}%);`),2&e.$$.dirty[0]){const e=w.filter((e=>e.unicode)).filter((e=>Pe(e)&&!Ue.has(e.unicode)));e.length?Ve((()=>function(e){const t=r.getRootNode();!function(e,t,n){for(const r of e){const e=We(n(r));void 0===Ke&&(Ke=We(t));const i=e/1.8<Ke;Ue.set(r.unicode,i),i?e!==Ke&&r.unicode:r.unicode}}(e,i,(e=>t.getElementById(`emo-${e.id}`))),n(1,w=w)}(e))):(n(1,w=w.filter(V)),Ve((()=>{n(6,o.scrollTop=0,o)})))}e.$$.dirty[0],e.$$.dirty[1],130&e.$$.dirty[0]|4096&e.$$.dirty[1]&&n(2,_=function(){if(O)return[{category:"",emojis:w}];const e=new Map;for(const t of w){const n=t.category||"";let r=e.get(n);r||(r=[],e.set(n,r)),r.push(t)}return[...e.entries()].map((([e,t])=>({category:e,emojis:t}))).sort(((e,t)=>b(e.category,t.category)))}()),258&e.$$.dirty[0]&&n(25,h=-1!==A&&w[A].id),10240&e.$$.dirty[0]&&(S?a.addEventListener("transitionend",(()=>{n(12,C=!0)}),{once:!0}):n(12,C=!1))},[g,w,_,$,r,i,o,O,A,s,x,S,C,a,I,j,c,u,P,T,R,N,L,f,z,h,function(e,t){return(n=[e.name||ft(e,t),...e.shortcodes||[]],He(n,(e=>e))).join(", ");var n},function(e){return Je(e,(t=>{const i=parseInt(getComputedStyle(r).getPropertyValue("--num-columns"),10),o=e.parentElement.getBoundingClientRect().width-t;n(54,M=i),n(21,N=o)}))},function(e){return Je(e,(e=>{n(52,k=e)}))},function(e){if(!O||!w.length)return;const t=t=>{Be(e),n(8,A=Fe(t,A,w))};switch(e.key){case"ArrowDown":return t(!1);case"ArrowUp":return t(!0);case"Enter":if(-1!==A)return Be(e),K(w[A].id);w.length&&n(8,A=0)}},W,function(e){const{target:t,key:n}=e,r=t=>{t&&(Be(e),t.focus())};switch(n){case"ArrowLeft":return r(t.previousSibling);case"ArrowRight":return r(t.nextSibling);case"Home":return r(t.parentElement.firstChild);case"End":return r(t.parentElement.lastChild)}},async function(e){const{target:t}=e;t.classList.contains("emoji")&&(Be(e),K(t.id.substring(4)))},G,async function(e){n(11,S=!S),n(15,j=I),S&&(Be(e),Ve((()=>U(`skintone-${j}`))))},function(e){if(!S)return;const t=async t=>{Be(e),n(15,j=t),await ye(),U(`skintone-${j}`)};switch(e.key){case"ArrowUp":return t(Fe(!0,j,T));case"ArrowDown":return t(Fe(!1,j,T));case"Home":return t(0);case"End":return t(T.length-1);case"Enter":return G(e);case"Escape":return Be(e),U("skintone-button")}},function(e){if(S)switch(e.key){case" ":return G(e)}},async function(e){const{relatedTarget:t}=e;t&&t.classList.contains("skintone-option")||n(11,S=!1)},d,p,v,y,m,b,function(){$=this.value,n(3,$)},function(e){ue[e?"unshift":"push"]((()=>{a=e,n(13,a)}))},e=>W(e),function(e){ue[e?"unshift":"push"]((()=>{o=e,n(6,o),n(1,w),n(40,v),n(51,E),n(23,f),n(38,d),n(39,p),n(42,m),n(3,$),n(22,L),n(55,D)}))},function(e){ue[e?"unshift":"push"]((()=>{i=e,n(5,i)}))},function(e){ue[e?"unshift":"push"]((()=>{r=e,n(4,r)}))}]}class dt extends ke{constructor(e){super(),this.shadowRoot.innerHTML="<style>:host{--emoji-padding:0.5rem;--emoji-size:1.375rem;--indicator-height:3px;--input-border-radius:0.5rem;--input-border-size:1px;--input-font-size:1rem;--input-line-height:1.5;--input-padding:0.25rem;--num-columns:8;--outline-size:2px;--border-size:1px;--skintone-border-radius:1rem;--category-font-size:1rem;display:flex;width:min-content;height:400px}:host,:host(.light){--background:#fff;--border-color:#e0e0e0;--indicator-color:#385ac1;--input-border-color:#999;--input-font-color:#111;--input-placeholder-color:#999;--outline-color:#999;--category-font-color:#111;--button-active-background:#e6e6e6;--button-hover-background:#d9d9d9}:host(.dark){--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555;--button-hover-background:#484848}@media(prefers-color-scheme:dark){:host{--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555;--button-hover-background:#484848}}button{margin:0;padding:0;border:none;background:none;box-shadow:none;cursor:pointer;-webkit-tap-highlight-color:transparent}button::-moz-focus-inner{border:0}input{padding:0;margin:0;line-height:1.15;font-family:inherit}input[type=search]{-webkit-appearance:none}:focus{outline:var(--outline-color) solid var(--outline-size);outline-offset:calc(-1*var(--outline-size))}:host([data-js-focus-visible]) :focus:not([data-focus-visible-added]){outline:none}:focus:not(:focus-visible){outline:none}.hide-focus{outline:none}*{box-sizing:border-box}.picker{contain:content;display:flex;flex-direction:column;background:var(--background);border:var(--border-size) solid var(--border-color);width:100%;height:100%;overflow:hidden;--total-emoji-size:calc(var(--emoji-size) + 2*var(--emoji-padding))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.hidden{opacity:0;pointer-events:none}.abs-pos{position:absolute;left:0;top:0}.gone{display:none!important}.cursor-pointer{cursor:pointer}.skintone-button-wrapper{background:var(--background);z-index:3}.skintone-button-wrapper.expanded{z-index:1}.skintone-list{position:absolute;right:0;top:0;z-index:2;overflow:visible;background:var(--background);border-bottom:var(--border-size) solid var(--border-color);border-radius:0 0 var(--skintone-border-radius) var(--skintone-border-radius);will-change:transform;transition:transform .2s ease-in-out;transform-origin:center 0}@media(prefers-reduced-motion:reduce){.skintone-list{transition-duration:1ms}}.skintone-list.no-animate{transition:none}.tabpanel{overflow-y:auto;-webkit-overflow-scrolling:touch;will-change:transform;min-height:0;flex:1;contain:content}.emoji-menu{display:grid;grid-template-columns:repeat(var(--num-columns),var(--total-emoji-size));justify-content:space-around;align-items:flex-start;width:100%}.category{padding:var(--emoji-padding);font-size:var(--category-font-size);color:var(--category-font-color)}.emoji,button.emoji{font-size:var(--emoji-size);display:flex;align-items:center;justify-content:center;border-radius:100%;height:var(--total-emoji-size);width:var(--total-emoji-size);line-height:1;overflow:hidden;font-family:var(--font-family)}@media(hover:hover) and (pointer:fine){.emoji:hover,button.emoji:hover{background:var(--button-hover-background)}}.emoji.active,.emoji:active,button.emoji.active,button.emoji:active{background:var(--button-active-background)}.custom-emoji{height:var(--total-emoji-size);width:var(--total-emoji-size);padding:var(--emoji-padding);object-fit:contain;pointer-events:none;background-repeat:no-repeat;background-position:50%;background-size:var(--emoji-size) var(--emoji-size)}.nav{display:grid;justify-content:space-between;contain:content}.nav,.nav-button{align-items:center}.nav-button{display:flex;justify-content:center}.indicator-wrapper{display:flex;border-bottom:1px solid var(--border-color)}.indicator{width:calc(100%/var(--num-groups));height:var(--indicator-height);opacity:var(--indicator-opacity);background-color:var(--indicator-color);will-change:transform,opacity;transition:opacity .1s linear,transform .25s ease-in-out}@media(prefers-reduced-motion:reduce){.indicator{will-change:opacity;transition:opacity .1s linear}}.pad-top{width:100%;height:var(--emoji-padding);z-index:3;background:var(--background)}.search-row{display:flex;align-items:center;position:relative;padding-left:var(--emoji-padding);padding-bottom:var(--emoji-padding)}.search-wrapper{flex:1;min-width:0}input.search{padding:var(--input-padding);border-radius:var(--input-border-radius);border:var(--input-border-size) solid var(--input-border-color);background:var(--background);color:var(--input-font-color);width:100%;font-size:var(--input-font-size);line-height:var(--input-line-height)}input.search::placeholder{color:var(--input-placeholder-color)}.favorites{display:flex;flex-direction:row;border-top:var(--border-size) solid var(--border-color);contain:content}.message{padding:var(--emoji-padding)}</style>",function(e,t,n,r,i,o,s=[-1]){const a=oe;se(e);const c=t.props||{},u=e.$$={fragment:null,ctx:null,props:o,update:F,not_equal:i,bound:V(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(a?a.$$.context:[]),callbacks:V(),dirty:s,skip_bound:!1};let l=!1;if(u.ctx=n?n(e,c,((t,n,...r)=>{const o=r.length?r[0]:n;return u.ctx&&i(u.ctx[t],u.ctx[t]=o)&&(!u.skip_bound&&u.bound[t]&&u.bound[t](o),l&&function(e,t){-1===e.$$.dirty[0]&&(ce.push(e),pe(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),n})):[],u.update(),l=!0,q(u.before_update),u.fragment=!!r&&r(u.ctx),t.target){if(t.hydrate){const e=(f=t.target,Array.from(f.childNodes));u.fragment&&u.fragment.l(e),e.forEach(X)}else u.fragment&&u.fragment.c();t.intro&&$e(e.$$.fragment),function(e,t,n){const{fragment:r,on_mount:i,on_destroy:o,after_update:s}=e.$$;r&&r.m(t,n),ge((()=>{const t=i.map(H).filter(J);o?o.push(...t):q(t),e.$$.on_mount=[]})),s.forEach(ge)}(e,t.target,t.anchor),be()}var f;se(a)}(this,{target:this.shadowRoot},ht,lt,W,{locale:38,dataSource:39,skinToneEmoji:41,i18n:0,database:40,customEmoji:42,customCategorySorting:43},[-1,-1,-1]),e&&(e.target&&Y(e.target,this,e.anchor),e.props&&(this.$set(e.props),be()))}static get observedAttributes(){return["locale","dataSource","skinToneEmoji","i18n","database","customEmoji","customCategorySorting"]}get locale(){return this.$$.ctx[38]}set locale(e){this.$set({locale:e}),be()}get dataSource(){return this.$$.ctx[39]}set dataSource(e){this.$set({dataSource:e}),be()}get skinToneEmoji(){return this.$$.ctx[41]}set skinToneEmoji(e){this.$set({skinToneEmoji:e}),be()}get i18n(){return this.$$.ctx[0]}set i18n(e){this.$set({i18n:e}),be()}get database(){return this.$$.ctx[40]}set database(e){this.$set({database:e}),be()}get customEmoji(){return this.$$.ctx[42]}set customEmoji(e){this.$set({customEmoji:e}),be()}get customCategorySorting(){return this.$$.ctx[43]}set customCategorySorting(e){this.$set({customCategorySorting:e}),be()}}class pt extends dt{constructor(e){super({props:e})}disconnectedCallback(){this.$destroy()}static get observedAttributes(){return["locale","data-source","skin-tone-emoji"]}attributeChangedCallback(e,t,n){super.attributeChangedCallback(e.replace(/-([a-z])/g,((e,t)=>t.toUpperCase())),t,n)}}customElements.define("emoji-picker",pt);const yt=pt},104:function(e){var t;t=function(){"use strict";var e={},t=16;function n(){this.a=0,this.b=0,this.i=0,this.z=new Array(t)}n.prototype.init=function(e,n){var r,i,o=0,s=0;for(r=0;r<t;r++)o=o+(i=e[n+r])&65535,s=s+(t-r)*i&65535,this.z[r]=i;this.a=65535&o,this.b=65535&s,this.i=0},n.prototype.next=function(e){var n=this.z[this.i];this.z[this.i]=e,this.i=this.i+1&15,this.a=this.a-n+e&65535,this.b=this.b-t*n+this.a&65535},n.prototype.value=function(){return(65535&this.a|(65535&this.b)<<16)>>>0};var r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~".split("").map((function(e){return e.charCodeAt(0)})),i=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,36,-1,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,-1,-1,-1,63,-1];function o(e){this.a=e,this.pos=0}function s(){this.a=[]}function a(e){var t,n;for(t=1,n=64;e>=n;t++,n<<=6);return t}function c(e){for(var t=0,n=0,r=0,i=0,o=0,s=e.length;s>=16;)t=t+e[o+0]|0,n=n+e[o+1]|0,r=r+e[o+2]|0,i=i+e[o+3]|0,t=t+e[o+4]|0,n=n+e[o+5]|0,r=r+e[o+6]|0,i=i+e[o+7]|0,t=t+e[o+8]|0,n=n+e[o+9]|0,r=r+e[o+10]|0,i=i+e[o+11]|0,t=t+e[o+12]|0,n=n+e[o+13]|0,r=r+e[o+14]|0,i=i+e[o+15]|0,o+=16,s-=16;for(;s>=4;)t=t+e[o+0]|0,n=n+e[o+1]|0,r=r+e[o+2]|0,i=i+e[o+3]|0,o+=4,s-=4;switch(i=((i+(r<<8)|0)+(n<<16)|0)+(t<<24)|0,s){case 3:i=i+(e[o+2]<<8)|0;case 2:i=i+(e[o+1]<<16)|0;case 1:i=i+(e[o+0]<<24)|0}return i>>>0}return o.prototype.haveBytes=function(){return this.pos<this.a.length},o.prototype.getByte=function(){var e=this.a[this.pos];if(this.pos++,this.pos>this.a.length)throw new RangeError("out of bounds");return e},o.prototype.getChar=function(){return String.fromCharCode(this.getByte())},o.prototype.getInt=function(){for(var e,t=0;this.haveBytes()&&(e=i[127&this.getByte()])>=0;)t=(t<<6)+e;return this.pos--,t>>>0},s.prototype.toArray=function(){return this.a},s.prototype.putByte=function(e){this.a.push(255&e)},s.prototype.putChar=function(e){this.putByte(e.charCodeAt(0))},s.prototype.putInt=function(e){var t,n,i=[];if(0!==e){for(t=0;e>0;t++,e>>>=6)i.push(r[63&e]);for(n=t-1;n>=0;n--)this.putByte(i[n])}else this.putChar("0")},s.prototype.putArray=function(e,t,n){for(var r=t;r<n;r++)this.a.push(e[r])},e.create=function(e,r){var i,o=new s,u=r.length,l=e.length,f=-1;if(o.putInt(u),o.putChar("\n"),l<=t)return o.putInt(u),o.putChar(":"),o.putArray(r,0,u),o.putInt(c(r)),o.putChar(";"),o.toArray();var h=Math.ceil(l/t),d=new Array(h),p=new Array(h);for(i=0;i<d.length;i++)d[i]=-1;for(i=0;i<p.length;i++)p[i]=-1;var y,g=new n;for(i=0;i<l-t;i+=t)g.init(e,i),y=g.value()%h,d[i/t]=p[y],p[y]=i/t;for(var v,m,b,w,_,$=0;$+t<u;)for(w=0,_=0,g.init(r,$),i=0,b=0;;){var E=250;for(m=p[y=g.value()%h];m>=0&&E-- >0;){var O,A,k,x,S,C,I;for(x=0,C=v=m*t,I=$+i;C<l&&I<u&&e[C]===r[I];x++,C++,I++);for(x--,S=1;S<v&&S<=i&&e[v-S]===r[$+i-S];S++);A=v- --S,k=i-S,(O=x+S+1)>=a(i-S)+a(O)+a(A)+3&&O>b&&(b=O,w=v-S,_=k),m=d[m]}if(b>0){_>0&&(o.putInt(_),o.putChar(":"),o.putArray(r,$,$+_),$+=_),$+=b,o.putInt(b),o.putChar("@"),o.putInt(w),o.putChar(","),w+b-1>f&&(f=w+b-1),b=0;break}if($+i+t>=u){o.putInt(u-$),o.putChar(":"),o.putArray(r,$,$+u-$),$=u;break}g.next(r[$+i+t]),i++}return $<u&&(o.putInt(u-$),o.putChar(":"),o.putArray(r,$,$+u-$)),o.putInt(c(r)),o.putChar(";"),o.toArray()},e.outputSize=function(e){var t=new o(e),n=t.getInt();if("\n"!==t.getChar())throw new Error("size integer not terminated by '\\n'");return n},e.apply=function(e,t,n){var r,i=0,a=new o(t),u=e.length,l=t.length;if(r=a.getInt(),"\n"!==a.getChar())throw new Error("size integer not terminated by '\\n'");for(var f=new s;a.haveBytes();){var h,d;switch(h=a.getInt(),a.getChar()){case"@":if(d=a.getInt(),a.haveBytes()&&","!==a.getChar())throw new Error("copy command not terminated by ','");if((i+=h)>r)throw new Error("copy exceeds output file size");if(d+h>u)throw new Error("copy extends past end of input");f.putArray(e,d,d+h);break;case":":if((i+=h)>r)throw new Error("insert command gives an output larger than predicted");if(h>l)throw new Error("insert count exceeds size of delta");f.putArray(a.a,a.pos,a.pos+h),a.pos+=h;break;case";":var p=f.toArray();if((!n||!1!==n.verifyChecksum)&&h!==c(p))throw new Error("bad checksum");if(i!==r)throw new Error("generated size does not match predicted size");return p;default:throw new Error("unknown delta operator")}}throw new Error("unterminated delta")},e},e.exports?e.exports=t():this.fossilDelta=t()},593:e=>{e.exports={createNanoEvents:()=>({events:{},emit(e,...t){for(let n of this.events[e]||[])n(...t)},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=this.events[e].filter((e=>e!==t))}})}},703:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.handlers=[]}return e.prototype.register=function(e,t){return void 0===t&&(t=!1),this.handlers.push(e),this},e.prototype.invoke=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.handlers.forEach((function(t){return t.apply(void 0,e)}))},e.prototype.invokeAsync=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Promise.all(this.handlers.map((function(t){return t.apply(void 0,e)})))},e.prototype.remove=function(e){var t=this.handlers.indexOf(e);this.handlers[t]=this.handlers[this.handlers.length-1],this.handlers.pop()},e.prototype.clear=function(){this.handlers=[]},e}();t.EventEmitter=n,t.createSignal=function(){var e=new n;function t(t){return e.register(t,null===this)}return t.once=function(t){var n=function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];t.apply(void 0,r),e.remove(n)};e.register(n)},t.remove=function(t){return e.remove(t)},t.invoke=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.invoke.apply(e,t)},t.invokeAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.invokeAsync.apply(e,t)},t.clear=function(){return e.clear()},t}},607:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(n(767));n(950);let c,u=new a.Client("ws://localhost:2567"),l="";!function(){s(this,void 0,void 0,(function*(){for(;""===l;)l=prompt("Please, enter your nickname");let e={nickName:l};try{let t=yield u.joinOrCreate("chat-room",e);t.onMessage("message-sent",(e=>{!function(e){let t=document.createElement("div"),n=document.createElement("p"),r=document.createElement("p"),i=document.createElement("small");i.classList.add("message-card-time"),r.classList.add("message-card-content"),n.classList.add("message-card-title"),t.classList.add("message-card","material-shadow"),n.innerHTML=e.title,r.innerHTML=e.content,i.innerHTML=e.time,e.title===l&&(t.classList.add("message-card-right"),n.innerHTML="You"),t.append(n,r,i),$(".discussion").append(t)}(e)})),t.onMessage("is-typing",(e=>{$(".is-typing").html(e)})),document.querySelector("emoji-picker").addEventListener("emoji-click",(e=>{let t=$(".message-input").val().toString();t+=e.detail.unicode,$(".message-input").val(t)})),$(".message-input").keyup((e=>{clearTimeout(c),t.send("is-typing",{isTyping:!0,nickName:l}),c=setTimeout((()=>{t.send("is-typing",{isTyping:!1,nickName:l})}),1e3)})),$(".input-button").click((e=>{e.preventDefault();let n=$(".message-input").val().toString();t.send("message",{message:n,nickName:l}),$(".message-input").val("")}))}catch(e){console.log("Error while joining the Room: ",e)}}))}()},418:()=>{}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,